name: sf
description: The Salesforce CLI
commands:
  - description: Commands to work with agents.
    name: agent
    commands:
      - description: agent generate commands
        name: generate
        commands:
          - description: Generate an agent spec, which is a YAML file that captures what an
              agent can do.
            name: agent-spec
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --type=: Type of agent to create. Internal types are copilots used
                internally by your company and customer types are the agents you
                create for your customers.
              --role=: Role of the agent.
              --company-name=: Name of your company.
              --company-description=: Description of your company.
              --company-website=: Website URL of your company.
              --max-topics=: Maximum number of topics to generate in the agent spec; default
                is 5.
              --agent-user=: Username of a user in your org to assign to your agent;
                determines what your agent can access and do.
              --enrich-logs=: Adds agent conversation data to event logs so you can view all
                agent session activity in one place.
              --tone=: Conversational style of the agent, such as how it expresses your
                brand personality in its messages through word choice,
                punctuation, and sentence structure.
              --spec=: Agent spec file, in YAML format, to use as input to the command.
              --output-file=: Path for the generated YAML agent spec file; can be an absolute
                or relative path.
              --full-interview: Prompt for both required and optional flags.
              --prompt-template=: API name of a customized prompt template to use instead of the
                default prompt template.
              --grounding-context=: Context information and personalization that's added to your
                prompts when using a custom prompt template.
              --force-overwrite: Don't prompt the user to confirm that an existing spec file will
                be overwritten.
              --help: Show help for command
            completion:
              flag:
                type:
                  - customer
                  - internal
                enrich-logs:
                  - "true"
                  - "false"
                tone:
                  - formal
                  - casual
                  - neutral
            commands: []
          - description: Generate an agent template from an existing agent in your DX
              project so you can then package the template in a managed package.
            name: template
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: Override the api version used for api requests made by this
                command
              --agent-version=: Version of the agent (BotVersion).
              -f, --agent-file=: Path to an agent (Bot) metadata file.
              --help: Show help for command
            commands: []
          - description: Generate an agent test spec, which is a YAML file that lists the
              test cases for testing a specific agent.
            name: test-spec
            flags:
              --flags-dir=: Import flag values from a directory.
              -d, --from-definition=: Filepath to the AIEvaluationDefinition metadata XML file in your
                DX project that you want to convert to a test spec YAML file.
              --force-overwrite: Don't prompt for confirmation when overwriting an existing test
                spec YAML file.
              -f, --output-file=: Name of the generated test spec YAML file. Default value is
                "specs/<AGENT_API_NAME>-testSpec.yaml".
              --help: Show help for command
            commands: []
      - description: agent test commands
        name: test
        commands:
          - description: Create an agent test in your org using a local test spec YAML file.
            name: create
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-name=: API name of the new test; the API name must not exist in the org.
              --spec=: Path to the test spec YAML file.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --preview: Preview the test metadata file (AiEvaluationDefinition) without
                deploying to your org.
              --force-overwrite: Don't prompt for confirmation when overwriting an existing test
                (based on API name) in your org.
              --help: Show help for command
            commands: []
          - description: List the available agent tests in your org.
            name: list
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: Get the results of a completed agent test run.
            name: results
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --job-id=: Job ID of the completed agent test run.
              --result-format=: Format of the agent test run results.
              -d, --output-dir=: Directory to write the agent test results into.
              --help: Show help for command
            completion:
              flag:
                result-format:
                  - json
                  - human
                  - junit
                  - tap
            commands: []
          - description: Resume an agent test that you previously started in your org so you
              can view the test results.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --job-id=: Job ID of the original agent test run.
              -r, --use-most-recent: Use the job ID of the most recent agent test run.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results to the terminal window.
              --result-format=: Format of the agent test run results.
              -d, --output-dir=: Directory to write the agent test results into.
              --help: Show help for command
            completion:
              flag:
                result-format:
                  - json
                  - human
                  - junit
                  - tap
            commands: []
          - description: Start an agent test in your org.
            name: run
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -n, --api-name=: API name of the agent test to run; corresponds to the name of
                the AiEvaluationDefinition metadata component that implements
                the agent test.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results to the terminal window.
              --result-format=: Format of the agent test run results.
              -d, --output-dir=: Directory to write the agent test results into.
              --help: Show help for command
            completion:
              flag:
                result-format:
                  - json
                  - human
                  - junit
                  - tap
            commands: []
      - description: Create an agent in your org using a local agent spec file.
        name: create
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --name=: Name (label) of the new agent.
          --api-name=: API name of the new agent; if not specified, the API name is derived
            from the agent name (label); the API name must not exist in the org.
          --spec=: Path to an agent spec file.
          --preview: Preview the agent without saving it in your org.
          --help: Show help for command
        commands: []
      - description: Interact with an active agent to preview how the agent responds to
          your statements, questions, and commands (utterances).
        name: preview
        flags:
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -a, --connected-app-user=: Username or alias of the connected app user that's configured with
            web-based access tokens to the agent.
          -n, --api-name=: API name of the agent you want to interact with.
          -d, --output-dir=: Directory where conversation transcripts are saved.
          -x, --apex-debug: Enable Apex debug logging during the agent preview conversation.
          --help: Show help for command
        commands: []
  - description: Use the alias commands to manage your aliases.
    name: alias
    commands:
      - description: List all aliases currently set on your local computer.
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --help: Show help for command
        commands: []
      - description: Set one or more aliases on your local computer.
        name: set
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --help: Show help for command
        commands: []
      - description: Unset one or more aliases that are currently set on your local
          computer.
        name: unset
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -a, --all: Unset all currently set aliases.
          -p, --no-prompt: Don't prompt the user for confirmation when unsetting all aliases.
          --help: Show help for command
        commands: []
  - description: Work with analytics assets.
    name: analytics
    commands:
      - description: Create analytics templates.
        name: generate
        commands:
          - description: Generate a simple Analytics template.
            name: template
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              -n, --name=: Name of the Analytics template.
              --help: Show help for command
            commands: []
  - description: Use the apex commands to create Apex classes, execute anonymous
      blocks, view your logs, run Apex tests, and view Apex test results.
    name: apex
    commands:
      - description: Create an apex class or trigger.
        name: generate
        commands:
          - description: Generate an Apex class.
            name: class
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Apex class.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            completion:
              flag:
                template:
                  - ApexException
                  - ApexUnitTest
                  - BasicUnitTest
                  - DefaultApexClass
                  - InboundEmailService
            commands: []
          - description: Generate an Apex trigger.
            name: trigger
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Apex trigger
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --sobject=: Salesforce object to generate a trigger on.
              -e, --event*=: Events that fire the trigger.
              --help: Show help for command
            completion:
              flag:
                template:
                  - ApexTrigger
                event:
                  - before insert
                  - before update
                  - before delete
                  - after insert
                  - after update
                  - after delete
                  - after undelete
            commands: []
      - description: Get debug logs or test results.
        name: get
        commands:
          - description: Fetch the specified log or given number of most recent logs from
              the org.
            name: log
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --log-id=: ID of the specific log to display.
              -n, --number=: Number of the most recent logs to display.
              -d, --output-dir=: Directory for saving the log files.
              --help: Show help for command
            commands: []
          - description: Display test results for a specific asynchronous test run.
            name: test
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --test-run-id=: ID of the test run.
              -c, --code-coverage: Retrieve code coverage results.
              --detailed-coverage: Display detailed code coverage per test.
              -d, --output-dir=: Directory in which to store test result files.
              -r, --result-format=: Format of the test results.
              --concise: Display only failed test results; works with human-readable
                output only.
              --help: Show help for command
            completion:
              flag:
                result-format:
                  - human
                  - tap
                  - junit
                  - json
            commands: []
      - description: List debug logs.
        name: list
        commands:
          - description: Display a list of IDs and general information about debug logs.
            name: log
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Execute anonymous Apex code entered on the command line or from a
          local file.
        name: run
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -f, --file=: Path to a local file that contains Apex code.
          --help: Show help for command
        commands:
          - description: Invoke Apex tests in an org.
            name: test
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -c, --code-coverage: Retrieve code coverage results.
              -d, --output-dir=: Directory in which to store test run files.
              -l, --test-level=: Level of tests to run; default is RunLocalTests.
              -n, --class-names*=: Apex test class names to run; default is all classes.
              -r, --result-format=: Format of the test results.
              -s, --suite-names*=: Apex test suite names to run.
              -t, --tests*=: Apex test class names or IDs and, if applicable, test methods to
                run; default is all tests.
              -w, --wait=: Sets the streaming client socket timeout in minutes; specify a
                longer wait time if timeouts occur frequently.
              -y, --synchronous: Runs test methods from a single Apex class synchronously; if not
                specified, tests are run asynchronously.
              -v, --detailed-coverage: Display detailed code coverage per test.
              --concise: Display only failed test results; works with human-readable
                output only.
              --help: Show help for command
            exclusiveflags:
              - - class-names
                - suite-names
                - tests
            completion:
              flag:
                test-level:
                  - RunLocalTests
                  - RunAllTestsInOrg
                  - RunSpecifiedTests
                result-format:
                  - human
                  - tap
                  - junit
                  - json
            commands: []
      - description: Tail debug logs.
        name: tail
        commands:
          - description: Activate debug logging and display logs in the terminal.
            name: log
            flags:
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -c, --color: Apply default colors to noteworthy log lines.
              -d, --debug-level=: Debug level to set on the DEVELOPER_LOG trace flag for your user.
              -s, --skip-trace-flag: Skip trace flag setup. Assumes that a trace flag and debug level
                are fully set up.
              --help: Show help for command
            exclusiveflags:
              - - debug-level
                - skip-trace-flag
            commands: []
  - description: description for apextests
    name: apextests
    commands:
      - description: List
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -f, --format=: Format of the output.
          -x, --manifest=: Manifest XML file.
          -s, --ignore-missing-tests: Ignore missing test methods.
          -d, --ignore-package-directory*=: Ignore a package directory.
          -n, --no-warnings: Do not print warnings for each Apex file missing annotations.
          --help: Show help for command
        commands: []
  - description: Commands to interact with API calls.
    name: api
    commands:
      - description: Commands that make API requests.
        name: request
        commands:
          - description: Execute a GraphQL statement.
            name: graphql
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -S, --stream-to-file=: Stream responses to a file.
              -i, --include: Include the HTTP response status and headers in the output.
              --body=: File or content with the GraphQL statement. Specify "-" to read
                from standard input.
              --help: Show help for command
            exclusiveflags:
              - - include
                - stream-to-file
            commands: []
          - description: Make an authenticated HTTP request using the Salesforce REST API.
            name: rest
            flags:
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -i, --include: Include the HTTP response status and headers in the output.
              -X, --method=: HTTP method for the request.
              -H, --header*=: HTTP header in "key:value" format.
              -f, --file=: JSON file that contains values for the request header, body,
                method, and URL.
              -S, --stream-to-file=: Stream responses to a file.
              -b, --body=: File or content for the body of the HTTP request. Specify "-" to
                read from standard input or "" for an empty body. If passing a
                file, prefix the filename with '@'.
              --help: Show help for command
            exclusiveflags:
              - - include
                - stream-to-file
              - - body
                - file
            completion:
              flag:
                method:
                  - GET
                  - POST
                  - PUT
                  - PATCH
                  - HEAD
                  - DELETE
                  - OPTIONS
                  - TRACE
            commands: []
  - description: Generate a field for a custom metadata type based on the provided
      field type.
    name: cmdt
    commands:
      - description: Generate a field for a custom metadata type based on the provided
          field type.
        name: generate
        commands:
          - description: Generate a field for a custom metadata type based on the provided
              field type.
            name: field
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Unique name for the field.
              -f, --type=: Type of the field.
              -p, --picklist-values*=: Picklist values; required for picklist fields.
              -s, --decimal-places=: Number of decimal places to use for number or percent fields.
              -l, --label=: Label for the field.
              -d, --output-directory=: Directory to store newly-created field definition files.
              --help: Show help for command
            completion:
              flag:
                type:
                  - Checkbox
                  - Date
                  - DateTime
                  - Email
                  - Number
                  - Percent
                  - Phone
                  - Picklist
                  - Text
                  - TextArea
                  - LongTextArea
                  - Url
            commands: []
          - description: Generate a custom metadata type and all its records from a
              Salesforce object.
            name: fromorg
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -n, --dev-name=: Name of the custom metadata type.
              -l, --label=: Label for the custom metadata type.
              -p, --plural-label=: Plural version of the label value; if blank, uses label.
              -v, --visibility=: Who can see the custom metadata type.
              -s, --sobject=: API name of the source Salesforce object used to generate the
                custom metadata type.
              -i, --ignore-unsupported: Ignore unsupported field types.
              -d, --type-output-directory=: Directory to store newly-created custom metadata type files.
              -r, --records-output-dir=: Directory to store newly-created custom metadata record files.
              --help: Show help for command
            completion:
              flag:
                visibility:
                  - PackageProtected
                  - Protected
                  - Public
            commands: []
          - description: Generate a new custom metadata type in the current project.
            name: object
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --type-name=: Unique object name for the custom metadata type.
              -l, --label=: Label for the custom metadata type.
              -p, --plural-label=: Plural version of the label value; if blank, uses label.
              -v, --visibility=: Who can see the custom metadata type.
              -d, --output-directory=: Directory to store the newly-created custom metadata type files
              --help: Show help for command
            completion:
              flag:
                visibility:
                  - PackageProtected
                  - Protected
                  - Public
            commands: []
          - description: Generate a new record for a given custom metadata type in the
              current project.
            name: record
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -t, --type-name=: API name of the custom metadata type to create a record for;
                must end in "__mdt".
              -n, --record-name=: Name of the new record.
              -l, --label=: Label for the new record.
              -p, --protected=: Protect the record when it's in a managed package.
              -i, --input-directory=: Directory from which to get the custom metadata type definition
                from.
              -d, --output-directory=: Directory to store newly-created custom metadata record files.
              --help: Show help for command
            completion:
              flag:
                protected:
                  - "true"
                  - "false"
            commands: []
          - description: Generate new custom metadata type records from a CSV file.
            name: records
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -f, --csv=: Pathname of the CSV file.
              -t, --type-name=: API name of the custom metadata type to create a record for.
              -i, --input-directory=: Directory from which to get the custom metadata type definition
                from.
              -d, --output-directory=: Directory to store newly-created custom metadata record files.
              -n, --name-column=: Column used to determine the name of the record.
              --help: Show help for command
            commands: []
  - description: Analyze your code to ensure it adheres to best practices.
    name: code-analyzer
    commands:
      - description: Output the current state of configuration for Code Analyzer.
        name: config
        flags:
          -w, --workspace*=: Set of files that make up your workspace.
          -t, --target*=: Subset of files within your workspace that you want to target for
            analysis.
          -r, --rule-selector*=: Selection of rules, based on engine name, severity level, rule name,
            tag, or a combination of criteria separated by colons.
          -c, --config-file=: Path to the existing configuration file used to customize the
            engines and rules.
          -f, --output-file=: Output file to write the configuration state to. The file is written
            in YAML format.
          --include-unmodified-rules: Include unmodified rules in the rule override settings.
          --help: Show help for command
        commands: []
      - description: List the rules that are available to analyze your code.
        name: rules
        flags:
          -w, --workspace*=: Set of files that make up your workspace.
          -t, --target*=: Subset of files within your workspace that you want to target for
            analysis.
          -r, --rule-selector*=: Selection of rules, based on engine name, severity level, rule name,
            tag, or a combination of criteria separated by colons.
          -c, --config-file=: Path to the configuration file used to customize the engines and
            rules.
          -f, --output-file=: Name of the file where the selected rules are written. The file
            format depends on the extension you specify; currently, only .json
            is supported for JSON-formatted output.
          -v, --view=: Format to display the rules in the terminal.
          --help: Show help for command
        completion:
          flag:
            view:
              - detail
              - table
        commands: []
      - description: Analyze your code with a selection of rules to ensure good coding
          practices.
        name: run
        flags:
          -w, --workspace*=: Set of files that make up your workspace.
          -t, --target*=: Subset of files within your workspace to be targeted for analysis.
          -r, --rule-selector*=: Selection of rules, based on engine name, severity level, rule name,
            tag, or a combination of criteria separated by colons.
          -s, --severity-threshold=: Severity level of a found violation that must be met or exceeded to
            cause this command to fail with a non-zero exit code.
          -v, --view=: Format to display the command results in the terminal.
          -f, --output-file*=: Name of the file where the analysis results are written. The file
            format depends on the extension you specify, such as .csv, .html,
            .xml, and so on.
          -c, --config-file=: Path to the configuration file used to customize the engines and
            rules.
          --help: Show help for command
        completion:
          flag:
            view:
              - detail
              - table
        commands: []
  - description: Create an Experience Cloud site using a template.
    name: community
    commands:
      - description: Retrieve the list of templates available in your org.
        name: list
        commands:
          - description: Retrieve the list of templates available in your org.
            name: template
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Create an Experience Cloud site using a template.
        name: create
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -n, --name=: Name of the site to create.
          -t, --template-name=: Template to use to create a site.
          -p, --url-path-prefix=: URL to append to the domain created when Digital Experiences was
            enabled for this org.
          -d, --description=: Description of the site.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --help: Show help for command
        commands: []
      - description: Publish an Experience Builder site to make it live.
        name: publish
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -n, --name=: Name of the Experience Builder site to publish.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --help: Show help for command
        commands: []
  - description: Commands to configure Salesforce CLI.
    name: config
    commands:
      - description: Get the value of a configuration variable.
        name: get
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --verbose: Display whether the configuration variables are set locally or
            globally.
          --help: Show help for command
        commands: []
      - description: List the configuration variables that you've previously set.
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --help: Show help for command
        commands: []
      - description: Set one or more configuration variables, such as your default org.
        name: set
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -g, --global: Set the configuration variables globally, so they can be used from
            any Salesforce DX project.
          --help: Show help for command
        commands: []
      - description: Unset local or global configuration variables.
        name: unset
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -g, --global: Unset the configuration variables globally.
          --help: Show help for command
        commands: []
  - description: Manage records in your org.
    name: data
    commands:
      - description: Get the results of a bulk ingest job that you previously ran.
        name: bulk
        commands:
          - description: Get the results of a bulk ingest job that you previously ran.
            name: results
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -i, --job-id=: Job ID of the bulk job.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Create a record or a file.
        name: create
        commands:
          - description: Upload a local file to an org.
            name: file
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -t, --title=: New title given to the file (ContentDocument) after it's
                uploaded.
              -f, --file=: Path of file to upload.
              -i, --parent-id=: ID of the record to attach the file to.
              --help: Show help for command
            commands: []
          - description: Create and insert a record into a Salesforce or Tooling API object.
            name: record
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --sobject=: API name of the Salesforce or Tooling API object that you're
                inserting a record into.
              -v, --values=: Values for the flags in the form <fieldName>=<value>, separate
                multiple pairs with spaces.
              -t, --use-tooling-api: Use Tooling API so you can insert a record in a Tooling API
                object.
              --help: Show help for command
            commands: []
      - description: Delete a single record or multiple records in bulk.
        name: delete
        commands:
          - description: Bulk delete records from an org using a CSV file. Uses Bulk API
              2.0.
            name: bulk
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -f, --file=: CSV file that contains the IDs of the records to update or
                delete.
              -s, --sobject=: API name of the Salesforce object, either standard or custom,
                that you want to update or delete records from.
              --line-ending=: Line ending used in the CSV file. Default value on Windows is
                `CRLF`; on macOS and Linux it's `LF`.
              --hard-delete: Mark the records as immediately eligible for deletion by your
                org. If you don't specify this flag, the deleted records go into
                the Recycle Bin.
              --help: Show help for command
            completion:
              flag:
                line-ending:
                  - CRLF
                  - LF
            commands: []
          - description: Deletes a single record from a Salesforce or Tooling API object.
            name: record
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --sobject=: API name of the Salesforce or Tooling API object that you're
                deleting a record from.
              -i, --record-id=: ID of the record you’re deleting.
              -w, --where=: List of <fieldName>=<value> pairs that identify the record you
                want to delete.
              -t, --use-tooling-api: Use Tooling API so you can delete a record from a Tooling API
                object.
              --help: Show help for command
            commands: []
          - description: Resume a bulk delete job that you previously started. Uses Bulk API
              2.0.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                "target-org" configuration variable is already set.
              -i, --job-id=: ID of the job you want to resume.
              --use-most-recent: Use the ID of the most recently-run bulk job.
              --wait=: Number of minutes to wait for the command to complete before
                displaying the results.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            exclusiveflags:
              - - job-id
                - use-most-recent
            commands: []
      - description: Export data from your org.
        name: export
        commands:
          - description: Bulk export records from an org into a file using a SOQL query.
              Uses Bulk API 2.0.
            name: bulk
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -q, --query=: SOQL query to execute.
              --query-file=: File that contains the SOQL query.
              --all-rows: Include records that have been soft-deleted due to a merge or
                delete. By default, deleted records are not returned.
              --output-file=: File where records are written.
              -r, --result-format=: Format to write the results.
              --column-delimiter=: Column delimiter to be used when writing CSV output. Default is
                COMMA.
              --line-ending=: Line ending to be used when writing CSV output. Default value on
                Windows is is `CRLF`; on macOS and Linux it's `LR`.
              --help: Show help for command
            exclusiveflags:
              - - query
                - query-file
            completion:
              flag:
                result-format:
                  - csv
                  - json
                column-delimiter:
                  - BACKQUOTE
                  - CARET
                  - COMMA
                  - PIPE
                  - SEMICOLON
                  - TAB
                line-ending:
                  - LF
                  - CRLF
            commands: []
          - description: Resume a bulk export job that you previously started. Uses Bulk API
              2.0.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -i, --job-id=: Job ID of the bulk export.
              --use-most-recent: Use the job ID of the bulk export job that was most recently run.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: Export data from an org into one or more JSON files.
            name: tree
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -q, --query*=: SOQL query, or filepath of a file that contains the query, to
                retrieve records.
              -p, --plan: Generate multiple sObject tree files and a plan definition file
                for aggregated import.
              -x, --prefix=: Prefix of generated files.
              -d, --output-dir=: Directory in which to generate the JSON files; default is
                current directory.
              --help: Show help for command
            commands: []
      - description: Get a single record.
        name: get
        commands:
          - description: Retrieve and display a single record of a Salesforce or Tooling API
              object.
            name: record
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --sobject=: API name of the Salesforce or Tooling API object that you're
                retrieving a record from.
              -i, --record-id=: ID of the record you’re retrieving.
              -w, --where=: List of <fieldName>=<value> pairs that identify the record you
                want to display.
              -t, --use-tooling-api: Use Tooling API so you can retrieve a record from a Tooling API
                object.
              --help: Show help for command
            commands: []
      - description: Import data to your org.
        name: import
        commands:
          - description: Bulk import records into a Salesforce object from a CSV file. Uses
              Bulk API 2.0.
            name: bulk
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -f, --file=: CSV file that contains the Salesforce object records you want to
                import.
              -s, --sobject=: API name of the Salesforce object, either standard or custom,
                into which you're importing records.
              --api-version=: Override the api version used for api requests made by this
                command
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --line-ending=: Line ending used in the CSV file. Default value on Windows is
                `CRLF`; on macOS and Linux it's `LF`.
              --column-delimiter=: Column delimiter used in the CSV file.
              --help: Show help for command
            completion:
              flag:
                line-ending:
                  - CRLF
                  - LF
                column-delimiter:
                  - BACKQUOTE
                  - CARET
                  - COMMA
                  - PIPE
                  - SEMICOLON
                  - TAB
            commands: []
          - description: Resume a bulk import job that you previously started. Uses Bulk API
              2.0.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --use-most-recent: Use the job ID of the bulk import job that was most recently run.
              -i, --job-id=: Job ID of the bulk import.
              -w, --wait=: Time to wait for the command to finish, in minutes.
              --help: Show help for command
            commands: []
          - description: Import data from one or more JSON files into an org.
            name: tree
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -f, --files*=: Comma-separated and in-order JSON files that contain the
                records, in sObject tree format, that you want to insert.
              -p, --plan=: Plan definition file to insert multiple data files.
              --help: Show help for command
            commands: []
      - description: Update many records.
        name: update
        commands:
          - description: Bulk update records to an org from a CSV file. Uses Bulk API 2.0.
            name: bulk
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -w, --wait=: Time to wait for the command to finish, in minutes.
              -f, --file=: CSV file that contains the Salesforce object records you want to
                update.
              -s, --sobject=: API name of the Salesforce object, either standard or custom,
                which you are updating.
              --api-version=: Override the api version used for api requests made by this
                command
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --line-ending=: Line ending used in the CSV file. Default value on Windows is
                `CRLF`; on macOS and Linux it's `LF`.
              --column-delimiter=: Column delimiter used in the CSV file.
              --help: Show help for command
            completion:
              flag:
                line-ending:
                  - CRLF
                  - LF
                column-delimiter:
                  - BACKQUOTE
                  - CARET
                  - COMMA
                  - PIPE
                  - SEMICOLON
                  - TAB
            commands: []
          - description: Updates a single record of a Salesforce or Tooling API object.
            name: record
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --sobject=: API name of the Salesforce or Tooling API object that contains
                the record you're updating.
              -i, --record-id=: ID of the record you’re updating.
              -w, --where=: List of <fieldName>=<value> pairs that identify the record you
                want to update.
              -v, --values=: Fields that you're updating, in the format of
                <fieldName>=<value> pairs.
              -t, --use-tooling-api: Use Tooling API so you can update a record in a Tooling API
                object.
              --help: Show help for command
            commands: []
          - description: Resume a bulk update job that you previously started. Uses Bulk API
              2.0.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --use-most-recent: Use the job ID of the bulk update job that was most recently run.
              -i, --job-id=: Job ID of the bulk update.
              -w, --wait=: Time to wait for the command to finish, in minutes.
              --help: Show help for command
            commands: []
      - description: Upsert many records.
        name: upsert
        commands:
          - description: Bulk upsert records to an org from a CSV file. Uses Bulk API 2.0.
            name: bulk
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -f, --file=: CSV file that contains the IDs of the records to update or
                delete.
              -s, --sobject=: API name of the Salesforce object, either standard or custom,
                that you want to update or delete records from.
              --line-ending=: Line ending used in the CSV file. Default value on Windows is
                `CRLF`; on macOS and Linux it's `LF`.
              --column-delimiter=: Column delimiter used in the CSV file.
              -i, --external-id=: Name of the external ID field, or the Id field.
              --help: Show help for command
            completion:
              flag:
                line-ending:
                  - CRLF
                  - LF
                column-delimiter:
                  - BACKQUOTE
                  - CARET
                  - COMMA
                  - PIPE
                  - SEMICOLON
                  - TAB
            commands: []
          - description: Resume a bulk upsert job that you previously started. Uses Bulk API
              2.0.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                "target-org" configuration variable is already set.
              -i, --job-id=: ID of the job you want to resume.
              --use-most-recent: Use the ID of the most recently-run bulk job.
              --wait=: Number of minutes to wait for the command to complete before
                displaying the results.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            exclusiveflags:
              - - job-id
                - use-most-recent
            commands: []
      - description: Execute a SOQL query.
        name: query
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -q, --query=: SOQL query to execute.
          -f, --file=: File that contains the SOQL query.
          -t, --use-tooling-api: Use Tooling API so you can run queries on Tooling API objects.
          --all-rows: Include deleted records. By default, deleted records are not
            returned.
          -r, --result-format=: Format to display the results; the --json flag overrides this flag.
          --output-file=: File where records are written; only CSV and JSON output formats are
            supported.
          --help: Show help for command
        completion:
          flag:
            result-format:
              - human
              - csv
              - json
        commands: []
      - description: View the status of a bulk data load job or batch.
        name: resume
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -b, --batch-id=: ID of the batch whose status you want to view; you must also specify
            the job ID.
          -i, --job-id=: ID of the job whose status you want to view.
          --help: Show help for command
        commands: []
      - description: Execute a SOSL text-based search query.
        name: search
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -q, --query=: SOSL query to execute.
          -f, --file=: File that contains the SOSL query.
          -r, --result-format=: Format to display the results, or to write to disk if you specify
            "csv".
          --help: Show help for command
        exclusiveflags:
          - - json
            - result-format
        completion:
          flag:
            result-format:
              - human
              - csv
              - json
        commands: []
  - description: Commands for sf plugin development.
    name: dev
    commands:
      - description: Commands for auditing a plugin.
        name: audit
        commands:
          - description: Audit messages in a plugin's messages directory to locate unused
              messages and missing messages that have references in source code.
            name: messages
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -p, --project-dir=: Location of the project where messages are to be audited.
              -m, --messages-dir=: Directory that contains the plugin's message files.
              -s, --source-dir=: Directory that contains the plugin's source code.
              --help: Show help for command
            commands: []
      - description: Commands to help you convert an sfdx plugin to sf.
        name: convert
        commands:
          - description: Convert a .json messages file into Markdown.
            name: messages
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -p, --project-dir=: Location of the project whose messages are to be converted.
              -f, --file-name*=: Filename to convert.
              --help: Show help for command
            commands: []
          - description: Convert a script file that contains deprecated sfdx-style commands
              to use the new sf-style commands instead.
            name: script
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -s, --script=: Filepath to the script you want to convert.
              --help: Show help for command
            commands: []
      - description: Commands for generating sf plugins, commands, and flags.
        name: generate
        commands:
          - description: Generate a new sf command.
            name: command
            flags:
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the new command. Use colons to separate the topic and
                command names.
              --force: Overwrite existing files.
              --dry-run: Display the changes that would be made without writing them to
                disk.
              --nuts: Generate a NUT test file for the command.
              --unit: Generate a unit test file for the command.
              --help: Show help for command
            commands: []
          - description: Generate a flag for an existing command.
            name: flag
            flags:
              --flags-dir=: Import flag values from a directory.
              -d, --dry-run: Print new flag code instead of adding it to the command file.
              --help: Show help for command
            commands: []
          - description: Generate a new sf plugin.
            name: plugin
            flags:
              --flags-dir=: Import flag values from a directory.
              --dry-run: Display the changes that would be made without writing them to
                disk.
              --help: Show help for command
            commands: []
  - description: Display test results for a specific asynchronous test run.
    name: flow
    commands:
      - description: Display test results for a specific asynchronous test run.
        name: get
        commands:
          - description: Display test results for a specific asynchronous test run.
            name: test
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --test-run-id=: ID of the test run.
              -c, --code-coverage: Retrieve code coverage results.
              --detailed-coverage: Not available for flow tests.
              -d, --output-dir=: Directory in which to store test result files.
              -r, --result-format=: Format of the test results.
              --concise: Display only failed test results; works with human-readable
                output only.
              --help: Show help for command
            completion:
              flag:
                result-format:
                  - human
                  - tap
                  - junit
                  - json
            commands: []
      - description: Invoke flow tests in an org.
        name: run
        commands:
          - description: Invoke flow tests in an org.
            name: test
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -r, --result-format=: Format of the test results.
              --concise: Display only failed test results; works with human-readable
                output only.
              -d, --output-dir=: Directory in which to store test result files.
              -c, --code-coverage: Retrieve code coverage results.
              -y, --synchronous: Run flow tests for one flow synchronously; if not specified,
                tests are run asynchronously.
              -l, --test-level=: Level of tests to run; default is RunLocalTests.
              -n, --class-names*=: Flow names that contain flow tests to run.
              -s, --suite-names*=: Not available for flow tests.
              -t, --tests*=: Flow test names to run.
              --help: Show help for command
            exclusiveflags:
              - - class-names
                - suite-names
                - tests
            completion:
              flag:
                result-format:
                  - human
                  - tap
                  - junit
                  - json
                test-level:
                  - RunLocalTests
                  - RunAllTestsInOrg
                  - RunSpecifiedTests
            commands: []
  - description: Legacy commands for backward compatibility.
    name: force
    commands:
      - description: Manage records in your org using Bulk API V1.
        name: data
        commands:
          - description: Bulk manage records in your org using Bulk API V1
            name: bulk
            commands:
              - description: Bulk delete records from an org using a CSV file. Uses Bulk API
                  1.0.
                name: delete
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -o, --target-org=: Username or alias of the target org. Not required if the
                    `target-org` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -f, --file=: CSV file that contains the IDs of the records to delete.
                  -s, --sobject=: API name of the Salesforce object, either standard or
                    custom, that you want to delete records from.
                  -w, --wait=: Number of minutes to wait for the command to complete before
                    displaying the results.
                  --help: Show help for command
                commands: []
              - description: View the status of a bulk data load job or batch. Uses Bulk API
                  1.0.
                name: status
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -o, --target-org=: Username or alias of the target org. Not required if the
                    `target-org` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -b, --batch-id=: ID of the batch whose status you want to view; you must also
                    specify the job ID.
                  -i, --job-id=: ID of the job whose status you want to view.
                  --help: Show help for command
                commands: []
              - description: Bulk upsert records to an org from a CSV file. Uses Bulk API 1.0.
                name: upsert
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -o, --target-org=: Username or alias of the target org. Not required if the
                    `target-org` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -i, --external-id=: Name of the external ID field, or the Id field.
                  -f, --file=: CSV file that contains the records to upsert.
                  -s, --sobject=: API name of the Salesforce object, either standard or
                    custom, that you want to upsert records to.
                  -w, --wait=: Number of minutes to wait for the command to complete before
                    displaying the results.
                  -r, --serial: Run batches in serial mode.
                  --help: Show help for command
                commands: []
      - description: creates a Lightning web component test file with boilerplate code
          inside a __tests__ directory.
        name: lightning
        commands:
          - description: creates a Lightning web component test file with boilerplate code
              inside a __tests__ directory.
            name: lwc
            commands:
              - description: creates a Lightning web component test file with boilerplate code
                  inside a __tests__ directory.
                name: test
                commands:
                  - description: creates a Lightning web component test file with boilerplate code
                      inside a __tests__ directory.
                    name: create
                    flags:
                      --json: format output as json
                      --loglevel=: logging level for this command invocation
                      -f, --filepath=: path to Lightning web component .js file to create a
                        test for
                      --help: Show help for command
                    completion:
                      flag:
                        loglevel:
                          - trace
                          - debug
                          - info
                          - warn
                          - error
                          - fatal
                          - TRACE
                          - DEBUG
                          - INFO
                          - WARN
                          - ERROR
                          - FATAL
                    commands: []
                  - description: invokes Lightning Web Components Jest unit tests.
                    name: run
                    flags:
                      --json: format output as json
                      --loglevel=: logging level for this command invocation
                      -d, --debug: run tests in debug mode
                      --watch: run tests in watch mode
                      --help: Show help for command
                    exclusiveflags:
                      - - debug
                        - watch
                    completion:
                      flag:
                        loglevel:
                          - trace
                          - debug
                          - info
                          - warn
                          - error
                          - fatal
                          - TRACE
                          - DEBUG
                          - INFO
                          - WARN
                          - ERROR
                          - FATAL
                    commands: []
                  - description: install Jest unit testing tools for Lightning Web Components.
                    name: setup
                    flags:
                      --json: format output as json
                      --loglevel=: logging level for this command invocation
                      --help: Show help for command
                    completion:
                      flag:
                        loglevel:
                          - trace
                          - debug
                          - info
                          - warn
                          - error
                          - fatal
                          - TRACE
                          - DEBUG
                          - INFO
                          - WARN
                          - ERROR
                          - FATAL
                    commands: []
      - description: Perform user-related admin tasks.
        name: user
        commands: []
      - description: Lists the status of push upgrade requests for a given package.
        name: package
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -p, --package=: Package ID (starts with 033) of the package that you want push
            upgrade information for.
          -l, --scheduled-last-days=: Number of days in the past for which to display the list of push
            upgrade requests that were scheduled. Used to filter the list output
            to only recently scheduled push upgrades.
          -s, --status=: "Status used to filter the list output Valid values are: Created,
            Canceled, Pending, In Progress, Failed, or Succeeded"
          --show-push-migrations-only: Display only push upgrade requests for package migrations.
          --help: Show help for command
        completion:
          flag:
            status:
              - Created
              - Cancelled
              - Pending
              - In Progress
              - Failed
              - Succeeded
        commands:
          - description: Lists the status of push upgrade requests for a given package.
            name: push-upgrade
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: Package ID (starts with 033) of the package that you want push
                upgrade information for.
              -l, --scheduled-last-days=: Number of days in the past for which to display the list of push
                upgrade requests that were scheduled. Used to filter the list
                output to only recently scheduled push upgrades.
              -s, --status=: "Status used to filter the list output Valid values are:
                Created, Canceled, Pending, In Progress, Failed, or Succeeded"
              --show-push-migrations-only: Display only push upgrade requests for package migrations.
              --help: Show help for command
            completion:
              flag:
                status:
                  - Created
                  - Cancelled
                  - Pending
                  - In Progress
                  - Failed
                  - Succeeded
            commands:
              - description: Lists the status of push upgrade requests for a given package.
                name: list
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                    `target-dev-hub` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -p, --package=: Package ID (starts with 033) of the package that you want
                    push upgrade information for.
                  -l, --scheduled-last-days=: Number of days in the past for which to display the list of
                    push upgrade requests that were scheduled. Used to filter
                    the list output to only recently scheduled push upgrades.
                  -s, --status=: "Status used to filter the list output Valid values are:
                    Created, Canceled, Pending, In Progress, Failed, or
                    Succeeded"
                  --show-push-migrations-only: Display only push upgrade requests for package migrations.
                  --help: Show help for command
                completion:
                  flag:
                    status:
                      - Created
                      - Cancelled
                      - Pending
                      - In Progress
                      - Failed
                      - Succeeded
                commands: []
  - description: Access Salesforce CLI information from the command line.
    name: info
    commands:
      - description: Read the Salesforce CLI release notes.
        name: releasenotes
        commands:
          - description: Display Salesforce CLI release notes on the command line.
            name: display
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --version=: CLI version or tag for which to display release notes.
              --help: Show help for command
            commands: []
  - description: Work with Lightning Web and Aura components.
    name: lightning
    commands:
      - description: Create LWC and Aura components and associated metadata.
        name: generate
        commands:
          - description: Generate a Lightning App.
            name: app
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Lightning App.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            completion:
              flag:
                template:
                  - DefaultLightningApp
            commands: []
          - description: Generate a bundle for an Aura component or a Lightning web
              component.
            name: component
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Lightning Component.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --type=: Type of the component bundle.
              --help: Show help for command
            completion:
              flag:
                template:
                  - default
                  - analyticsDashboard
                  - analyticsDashboardWithStep
                type:
                  - aura
                  - lwc
            commands: []
          - description: Generate a Lightning Event.
            name: event
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Lightning Event.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            completion:
              flag:
                template:
                  - DefaultLightningEvt
            commands: []
          - description: Generate a Lightning Interface.
            name: interface
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Lightning Interface.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            completion:
              flag:
                template:
                  - DefaultLightningIntf
            commands: []
          - description: Generate a Lightning test.
            name: test
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Lightning Test.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            completion:
              flag:
                template:
                  - DefaultLightningTest
            commands: []
  - description: Commands to create and manage orgs and scratch org users.
    name: org
    commands:
      - description: Used to assign permissions to a user
        name: assign
        commands:
          - description: Assign a permission set to one or more org users.
            name: permset
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name*=: Permission set to assign.
              -b, --on-behalf-of*=: Username or alias to assign the permission set to.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: Assign a permission set license to one or more org users.
            name: permsetlicense
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name*=: Name of the permission set license to assign.
              -b, --on-behalf-of*=: Usernames or alias to assign the permission set license to.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Used to create a user
        name: create
        commands:
          - description: Create a scratch org configuration (shape) based on the specified
              source org.
            name: shape
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: Create a snapshot of a scratch org.
            name: snapshot
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -o, --source-org=: ID or locally authenticated username or alias of scratch org to
                snapshot.
              -n, --name=: Unique name of snapshot.
              -d, --description=: Description of snapshot.
              --help: Show help for command
            commands: []
          - description: Create a sandbox org.
            name: sandbox
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -f, --definition-file=: Path to a sandbox definition file.
              -s, --set-default: Set the sandbox org as your default org.
              -a, --alias=: Alias for the sandbox org.
              -w, --wait=: Number of minutes to wait for the sandbox org to be ready.
              -i, --poll-interval=: Number of seconds to wait between retries.
              --async: Request the sandbox creation, but don't wait for it to complete.
              -n, --name=: Name of the sandbox org.
              --source-sandbox-name=: Name of the sandbox org to clone.
              --source-id=: ID of the sandbox org to clone.
              -l, --license-type=: Type of sandbox license.
              -o, --target-org=: Username or alias of the production org that contains the
                sandbox license.
              --no-prompt: Don't prompt for confirmation about the sandbox configuration.
              --no-track-source: Do not use source tracking for this sandbox.
              --help: Show help for command
            exclusiveflags:
              - - async
                - wait
              - - async
                - poll-interval
              - - async
                - poll-interval
                - wait
              - - license-type
                - source-id
                - source-sandbox-name
            completion:
              flag:
                license-type:
                  - Developer
                  - Developer_Pro
                  - Partial
                  - Full
            commands: []
          - description: Create a scratch org.
            name: scratch
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -a, --alias=: Alias for the scratch org.
              --async: Request the org, but don't wait for it to complete.
              -d, --set-default: Set the scratch org as your default org
              -f, --definition-file=: Path to a scratch org definition file.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org.
              -c, --no-ancestors: Don't include second-generation managed package (2GP) ancestors
                in the scratch org.
              -e, --edition=: Salesforce edition of the scratch org. Overrides the value of
                the "edition" option in the definition file, if set.
              -s, --snapshot=: Name of the snapshot to use when creating this scratch org.
                Overrides the value of the "snapshot" option in the defintion
                file, if set.
              -m, --no-namespace: Create the scratch org with no namespace, even if the Dev Hub
                has a namespace.
              -y, --duration-days=: Number of days before the org expires.
              -w, --wait=: Number of minutes to wait for the scratch org to be ready.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --client-id=: Consumer key of the Dev Hub connected app.
              -t, --track-source: Use source tracking for this scratch org. Set --no-track-source
                to disable source tracking.
              --username=: Username of the scratch org admin user. Overrides the value of
                the "username" option in the definition file, if set.
              --description=: Description of the scratch org in the Dev Hub. Overrides the
                value of the "description" option in the definition file, if
                set.
              --name=: Name of the org, such as "Acme Company". Overrides the value of
                the "orgName" option in the definition file, if set.
              --release=: Release of the scratch org as compared to the Dev Hub release.
              --admin-email=: Email address that will be applied to the org's admin user.
                Overrides the value of the "adminEmail" option in the definition
                file, if set.
              --source-org=: 15-character ID of the org shape that the new scratch org is
                based on. Overrides the value of the "sourceOrg" option in the
                definition file, if set.
              --help: Show help for command
            exclusiveflags:
              - - edition
                - snapshot
                - source-org
            completion:
              flag:
                edition:
                  - developer
                  - enterprise
                  - group
                  - professional
                  - partner-developer
                  - partner-enterprise
                  - partner-group
                  - partner-professional
                release:
                  - preview
                  - previous
            commands: []
          - description: Create a user for a scratch org.
            name: user
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -a, --set-alias=: Set an alias for the created username to reference in other CLI
                commands.
              -f, --definition-file=: File path to a user definition file for customizing the new user.
              -s, --set-unique-username: Force the username, if specified in the definition file or at
                the command line, to be unique by appending the org ID.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Delete scratch orgs, sandboxes, org shapes, and org snapshots.
        name: delete
        commands:
          - description: Delete all org shapes for a target org.
            name: shape
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --no-prompt: Don't prompt for confirmation.
              --help: Show help for command
            commands: []
          - description: Delete a scratch org snapshot.
            name: snapshot
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --snapshot=: Name or ID of snapshot to delete.
              -p, --no-prompt: Don't prompt the user to confirm the deletion.
              --help: Show help for command
            commands: []
          - description: Delete a sandbox.
            name: sandbox
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -p, --no-prompt: Don't prompt the user to confirm the deletion.
              --help: Show help for command
            commands: []
          - description: Delete a scratch org.
            name: scratch
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -p, --no-prompt: Don't prompt the user to confirm the deletion.
              --help: Show help for command
            commands: []
      - description: Disable source tracking in an org.
        name: disable
        commands:
          - description: Prevent Salesforce CLI from tracking changes in your source files
              between your project and an org.
            name: tracking
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --help: Show help for command
            commands: []
      - description: Display information about an org.
        name: display
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --verbose: Display the sfdxAuthUrl property.
          --help: Show help for command
        commands:
          - description: Display information about a Salesforce user.
            name: user
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Enable source tracking in an org.
        name: enable
        commands:
          - description: Allow Salesforce CLI to track changes in your source files between
              your project and an org.
            name: tracking
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --help: Show help for command
            commands: []
      - description: Generate commands for a user
        name: generate
        commands:
          - description: Generate a random password for scratch org users.
            name: password
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -b, --on-behalf-of*=: Comma-separated list of usernames or aliases to assign the
                password to; must have been created locally with the "org create
                user" command.
              -l, --length=: Number of characters in the generated password; valid values are
                between 8 and 100.
              -c, --complexity=: Level of password complexity or strength; the higher the value,
                the stronger the password.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Get details about a scratch org snapshot.
        name: get
        commands:
          - description: Get details about a scratch org snapshot.
            name: snapshot
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -s, --snapshot=: Name or ID of snapshot to retrieve.
              --help: Show help for command
            commands: []
      - description: List all orgs you’ve created or authenticated to.
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --verbose: List more information about each org.
          --all: Include expired, deleted, and unknown-status scratch orgs.
          --clean: Remove all local org authorizations for non-active scratch orgs. Use
            "org logout" to remove non-scratch orgs.
          -p, --no-prompt: Don't prompt for confirmation.
          --skip-connection-status: Skip retrieving the connection status of non-scratch orgs.
          --help: Show help for command
        commands:
          - description: Display record counts for the specified standard or custom objects.
            name: sobject
            commands:
              - description: Display record counts for the specified standard or custom objects.
                name: record-counts
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -s, --sobject*=: API name of the standard or custom object for which to
                    display record counts.
                  -o, --target-org=: Username or alias of the target org. Not required if the
                    `target-org` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  --help: Show help for command
                commands: []
          - description: List all org shapes you’ve created.
            name: shape
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --help: Show help for command
            commands: []
          - description: List scratch org snapshots.
            name: snapshot
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: List authorization information about the orgs you created or logged
              into.
            name: auth
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --help: Show help for command
            commands: []
          - description: Display information about limits in your org.
            name: limits
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
          - description: List the metadata components and properties of a specified type.
            name: metadata
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: API version to use; default is the most recent API version.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -f, --output-file=: Pathname of the file in which to write the results.
              -m, --metadata-type=: Metadata type to be retrieved, such as CustomObject; metadata
                type names are case-sensitive.
              --folder=: Folder associated with the component; required for components
                that use folders; folder names are case-sensitive.
              --help: Show help for command
            commands: []
          - description: Display details about the metadata types that are enabled for your
              org.
            name: metadata-types
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: API version to use; default is the most recent API version.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -f, --output-file=: Pathname of the file in which to write the results.
              --help: Show help for command
            commands: []
          - description: List all locally-authenticated users of an org.
            name: users
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Authorize an org for use with Salesforce CLI.
        name: login
        commands:
          - description: Authorize an org using an existing Salesforce access token.
            name: access-token
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -r, --instance-url=: URL of the instance that the org lives on.
              -d, --set-default-dev-hub: Set the authenticated org as the default Dev Hub.
              -s, --set-default: Set the authenticated org as the default that all org-related
                commands run against.
              -a, --alias=: Alias for the org.
              -p, --no-prompt: Don't prompt for confirmation.
              --help: Show help for command
            commands: []
          - description: Authorize an org using a device code.
            name: device
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -i, --client-id=: OAuth client ID (also called consumer key) of your custom
                connected app.
              -r, --instance-url=: URL of the instance that the org lives on.
              -d, --set-default-dev-hub: Set the authenticated org as the default Dev Hub.
              -s, --set-default: Set the authenticated org as the default that all org-related
                commands run against.
              -a, --alias=: Alias for the org.
              --help: Show help for command
            commands: []
          - description: Log in to a Salesforce org using a JSON web token (JWT).
            name: jwt
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --username=: Username of the user logging in.
              -f, --jwt-key-file=: Path to a file containing the private key.
              -i, --client-id=: OAuth client ID (also called consumer key) of your custom
                connected app.
              -r, --instance-url=: URL of the instance that the org lives on.
              -d, --set-default-dev-hub: Set the authenticated org as the default Dev Hub.
              -s, --set-default: Set the authenticated org as the default that all org-related
                commands run against.
              -a, --alias=: Alias for the org.
              --help: Show help for command
            commands: []
          - description: Authorize an org using a Salesforce DX authorization URL stored in
              a file or through standard input (stdin).
            name: sfdx-url
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -f, --sfdx-url-file=: Path to a file that contains the Salesforce DX authorization URL.
              -u, --sfdx-url-stdin=: Pipe the Salesforce DX authorization URL through standard input
                (stdin).
              -d, --set-default-dev-hub: Set the authenticated org as the default Dev Hub.
              -s, --set-default: Set the authenticated org as the default that all org-related
                commands run against.
              -a, --alias=: Alias for the org.
              --help: Show help for command
            commands: []
          - description: Log in to a Salesforce org using the web server flow.
            name: web
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -b, --browser=: Browser in which to open the org.
              -i, --client-id=: OAuth client ID (also called consumer key) of your custom
                connected app.
              -r, --instance-url=: URL of the instance that the org lives on.
              -d, --set-default-dev-hub: Set the authenticated org as the default Dev Hub.
              -s, --set-default: Set the authenticated org as the default that all org-related
                commands run against.
              -a, --alias=: Alias for the org.
              -c, --client-app=: Name to give to the link between the connected app or external
                client and the already-authenticated user. You can specify any
                string you want. Must be used with --username.
              --username=: Username of the already-authenticated user to link to the
                connected app or external client app. Must be used with
                --client-app.
              --scopes=: "Authentication (OAuth) scopes to request. Use the scope's short
                name; specify multiple scopes using just one flag instance and
                separated by spaces: --scopes \"sfap_api chatbot_api\"."
              --help: Show help for command
            completion:
              flag:
                browser:
                  - chrome
                  - edge
                  - firefox
            commands: []
      - description: Open your default scratch org, or another specified org, in a browser.
        name: open
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --private: Open the org in the default browser using private (incognito) mode.
          -b, --browser=: Browser where the org opens.
          -p, --path=: Navigation URL path to open a specific page.
          -r, --url-only: Display navigation URL, but don’t launch browser.
          -f, --source-file=: Path to ApexPage, FlexiPage, Flow, or Agent metadata to open in the
            associated Builder.
          --help: Show help for command
        completion:
          flag:
            browser:
              - chrome
              - edge
              - firefox
        exclusiveflags:
          - - browser
            - private
            - url-only
          - - path
            - source-file
        commands:
          - description: Open an agent in your org's Agent Builder UI in a browser.
            name: agent
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -n, --api-name=: API name, also known as developer name, of the agent you want to
                open in the org's Agent Builder UI.
              --private: Open the org in the default browser using private (incognito)
                mode.
              -b, --browser=: Browser where the org opens.
              -r, --url-only: Display navigation URL, but don’t launch browser.
              --help: Show help for command
            exclusiveflags:
              - - browser
                - private
                - url-only
            completion:
              flag:
                browser:
                  - chrome
                  - edge
                  - firefox
            commands: []
      - description: Refresh a sandbox org using the sandbox name.
        name: refresh
        commands:
          - description: Refresh a sandbox org using the sandbox name.
            name: sandbox
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --no-auto-activate: Disable auto-activation of the sandbox after a successful
                refresh.
              -w, --wait=: Number of minutes to poll for sandbox refresh status.
              -i, --poll-interval=: Number of seconds to wait between status polling requests.
              --source-sandbox-name=: Name of the sandbox org that becomes the new source org for the
                refreshed sandbox.
              --source-id=: ID of the sandbox org that becomes the new source org for the
                refreshed sandbox.
              --async: Request the sandbox refresh, but don't wait for it to complete.
              -n, --name=: Name of the existing sandbox org in your production org that you
                want to refresh.
              -f, --definition-file=: Path to a sandbox definition file for overriding its
                configuration when you refresh it.
              -o, --target-org=: Username or alias of the production org that contains the
                sandbox license.
              --no-prompt: Don't prompt for confirmation about the sandbox refresh.
              --help: Show help for command
            exclusiveflags:
              - - async
                - wait
              - - async
                - poll-interval
              - - source-id
                - source-sandbox-name
              - - async
                - poll-interval
                - wait
            commands: []
      - description: Resume an org creation that was started asynchronously, timed out,
          or was interrupted.
        name: resume
        commands:
          - description: Check the status of a sandbox creation, and log in to it if it's
              ready.
            name: sandbox
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -w, --wait=: Number of minutes to wait for the sandbox org to be ready.
              -n, --name=: Name of the sandbox org.
              -i, --job-id=: Job ID of the incomplete sandbox creation that you want to check
                the status of.
              -l, --use-most-recent: Use the most recent sandbox create request.
              -o, --target-org=: Username or alias of the production org that contains the
                sandbox license.
              --help: Show help for command
            exclusiveflags:
              - - job-id
                - name
            commands: []
          - description: Resume the creation of an incomplete scratch org.
            name: scratch
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -i, --job-id=: Job ID of the incomplete scratch org create that you want to
                resume.
              -r, --use-most-recent: Use the job ID of the most recent incomplete scratch org.
              -w, --wait=: Number of minutes to wait for the scratch org to be ready.
              --help: Show help for command
            commands: []
      - description: Log out of a Salesforce org.
        name: logout
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org.
          -c, --client-app=: Client app to log out of.
          -a, --all: Include all authenticated orgs.
          -p, --no-prompt: Don't prompt for confirmation.
          --help: Show help for command
        exclusiveflags:
          - - all
            - target-org
        commands: []
  - description: Commands to develop and install unlocked packages and managed 2GP packages.
    name: package
    commands:
      - description: Install or upgrade a version of a package in the target org.
        name: install
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -w, --wait=: Number of minutes to wait for installation status.
          -k, --installation-key=: "Installation key for key-protected package (default: null)."
          -b, --publish-wait=: Maximum number of minutes to wait for the Subscriber Package Version
            ID to become available in the target org before canceling the
            install request.
          -r, --no-prompt: Don't prompt for confirmation.
          -p, --package=: ID (starts with 04t) or alias of the package version to install.
          -a, --apex-compile=: Compile all Apex in the org and package, or only Apex in the
            package; unlocked packages only.
          -s, --security-type=: Security access type for the installed package. Available options
            are AdminsOnly and AllUsers.
          -t, --upgrade-type=: Upgrade type for the package installation; available only for
            unlocked packages.
          --help: Show help for command
        completion:
          flag:
            apex-compile:
              - all
              - package
            security-type:
              - AllUsers
              - AdminsOnly
            upgrade-type:
              - DeprecateOnly
              - Mixed
              - Delete
        commands:
          - description: Retrieve the status of a package installation request.
            name: report
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --request-id=: ID of the package install request you want to check; starts with
                0Hf.
              --help: Show help for command
            commands: []
      - description: Command to list installed packages.
        name: installed
        commands:
          - description: List the org’s installed packages.
            name: list
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              --help: Show help for command
            commands: []
      - description: Abort a package push upgrade that has been scheduled. Only push
          upgrade requests with a status of Created or Pending can be aborted.
        name: push-upgrade
        commands:
          - description: Abort a package push upgrade that has been scheduled. Only push
              upgrade requests with a status of Created or Pending can be
              aborted.
            name: abort
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --push-request-id=: ID of the package push request (starts with 0DV). This ID is
                returned after the package push-upgrade schedule command
                completes successfully.
              --help: Show help for command
            commands: []
          - description: Lists the status of push upgrade requests for a given package.
            name: list
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: Package ID (starts with 033) of the package that you want push
                upgrade information for.
              -l, --scheduled-last-days=: Number of days in the past for which to display the list of push
                upgrade requests that were scheduled. Used to filter the list
                output to only recently scheduled push upgrades.
              -s, --status=: "Status used to filter the list output Valid values are:
                Created, Canceled, Pending, In Progress, Failed, or Succeeded"
              --show-push-migrations-only: Display only push upgrade requests for package migrations.
              --help: Show help for command
            completion:
              flag:
                status:
                  - Created
                  - Cancelled
                  - Pending
                  - In Progress
                  - Failed
                  - Succeeded
            commands: []
          - description: Retrieve the status of a package push upgrade.
            name: report
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --push-request-id=: ID of the package push request (starts with 0DV). This ID is
                returned after the package push-upgrade schedule command
                completes successfully.
              --help: Show help for command
            commands: []
          - description: Schedule a package push upgrade.
            name: schedule
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org that owns the package.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: ID (starts with 04t) of the package version that the package is
                being upgraded to. The package version must be an active,
                non-beta package version.
              -t, --start-time=: Date and time (UTC) when the push upgrade is processed. Set to
                the earliest time that you want Salesforce to attempt to start
                the upgrade.
              -l, --org-list=: Comma-separated list of subscriber org IDs that need the package
                upgrade. Either --org-list or --org-file must be specified.
              -f, --org-file=: Filename of the CSV file that contains the list of subscriber
                org IDs that need the package upgrade. Either --org-list or
                --org-file must be specified.
              --migrate-to-2gp: Upgrade from a first-generation managed package (1GP) to a
                second-generation managed package (2GP). Required when you’re
                pushing a 2GP package to orgs with the 1GP version installed.
              --help: Show help for command
            exclusiveflags:
              - - org-file
                - org-list
            commands: []
      - description: Uninstall a second-generation package from the target org.
        name: uninstall
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -w, --wait=: Number of minutes to wait for uninstall status.
          -p, --package=: ID (starts with 04t) or alias of the package version to uninstall.
          --help: Show help for command
        commands:
          - description: Retrieve the status of a package uninstall request.
            name: report
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --request-id=: ID of the package uninstall request you want to check; starts
                with 06y.
              --help: Show help for command
            commands: []
      - description: Commands to manage package versions.
        name: version
        commands:
          - description: Create a package version in the Dev Hub org.
            name: create
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -b, --branch=: Name of the branch in your source control system that the
                package version is based on.
              -c, --code-coverage: Calculate and store the code coverage percentage by running the
                packaged Apex tests included in this package version.
              -f, --definition-file=: Path to a definition file similar to scratch org definition file
                that contains the list of features and org preferences that the
                metadata of the package version depends on.
              -k, --installation-key=: Installation key for key-protected package. (either
                --installation-key or --installation-key-bypass is required)
              -x, --installation-key-bypass: Bypass the installation key requirement. (either
                --installation-key or --installation-key-bypass is required)
              -p, --package=: ID (starts with 0Ho) or alias of the package to create a version
                of.
              -d, --path=: Path to the directory that contains the contents of the package.
              --post-install-script=: Name of the post-install script; applies to managed packages
                only.
              --post-install-url=: Post-install instructions URL.
              --releasenotes-url=: Release notes URL.
              --skip-ancestor-check: Overrides ancestry requirements, which allows you to specify a
                package ancestor that isn’t the highest released package
                version.
              --skip-validation: Skip validation during package version creation; you can’t
                promote unvalidated package versions.
              --async-validation: Return a new package version before completing package
                validations.
              -t, --tag=: Package version’s tag.
              --uninstall-script=: Uninstall script name; applies to managed packages only.
              -e, --version-description=: Description of the package version to be created; overrides the
                sfdx-project.json value.
              -a, --version-name=: Name of the package version to be created; overrides the
                sfdx-project.json value.
              -n, --version-number=: Version number of the package version to be created; overrides
                the sfdx-project.json value.
              -w, --wait=: Number of minutes to wait for the package version to be created.
              --language=: Language for the package.
              --verbose: Display verbose command output.
              --help: Show help for command
            exclusiveflags:
              - - code-coverage
                - skip-validation
              - - async-validation
                - code-coverage
                - skip-validation
              - - async-validation
                - skip-validation
            commands:
              - description: List package version creation requests.
                name: list
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                    `target-dev-hub` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -c, --created-last-days=: Number of days since the request was created, starting at
                    00:00:00 of first day to now. Use 0 for today.
                  -s, --status=: Status of the version creation request, used to filter the
                    list.
                  --show-conversions-only: Filter the list output to display only converted package
                    version.
                  --verbose: Displays additional information at a slight performance
                    cost, such as the version name and number for each package
                    version create request.
                  --help: Show help for command
                completion:
                  flag:
                    status:
                      - Queued
                      - InProgress
                      - Success
                      - Error
                commands: []
              - description: Retrieve details about a package version creation request.
                name: report
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                    `target-dev-hub` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -i, --package-create-request-id=: ID (starts with 08c) of the package version creation request
                    you want to display.
                  --help: Show help for command
                commands: []
          - description: Delete a package version.
            name: delete
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -n, --no-prompt: Don’t prompt before deleting the package version.
              -p, --package=: ID (starts with 04t) or alias of the package version to delete.
              --help: Show help for command
            commands: []
          - description: Display the ancestry tree for a 2GP managed package version.
            name: displayancestry
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: ID or alias of the package (starts with 0Ho) or package version
                (starts with 04t) to display ancestry for.
              --dot-code: Display the ancestry tree in DOT code.
              --verbose: Display both the package version ID (starts with 04t) and the
                version number (major.minor.patch.build) in the ancestry tree.
              --help: Show help for command
            commands: []
          - description: List all package versions in the Dev Hub org.
            name: list
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -c, --created-last-days=: Number of days since the request was created, starting at
                00:00:00 of first day to now. Use 0 for today.
              --concise: Display limited package version details.
              --show-conversions-only: Filter the list output to display only converted package version.
              -m, --modified-last-days=: Number of days since the items were modified, starting at
                00:00:00 of first day to now. Use 0 for today.
              -p, --packages=: Comma-delimited list of packages (aliases or 0Ho IDs) to list.
              -r, --released: Display released versions only (IsReleased=true).
              -b, --branch=: Branch in your source control system used to filter the results;
                only package versions based on the specified branch are listed.
              -o, --order-by=: Package version fields used to order the list.
              --verbose: Display extended package version details.
              --help: Show help for command
            commands: []
          - description: Promote a package version to released.
            name: promote
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: ID (starts with 04t) or alias of the package version to promote.
              -n, --no-prompt: Don't prompt to confirm setting the package version as released.
              --help: Show help for command
            commands: []
          - description: Retrieve details about a package version in the Dev Hub org.
            name: report
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: ID (starts with 04t) or alias of the package to retrieve details
                for.
              --verbose: Display extended package version details.
              --help: Show help for command
            commands: []
          - description: Update a package version.
            name: update
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
                `target-dev-hub` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -p, --package=: ID (starts with 04t) or alias of the package to update a version
                of.
              -a, --version-name=: New package version name.
              -e, --version-description=: New package version description.
              -b, --branch=: New package version branch.
              -t, --tag=: New package version tag.
              -k, --installation-key=: "New installation key for key-protected package (default: null)"
              --help: Show help for command
            commands: []
      - description: Convert a managed-released first-generation managed package into a
          second-generation managed package.
        name: convert
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -p, --package=: ID (starts with 033) of the first-generation managed package to
            convert.
          -k, --installation-key=: Installation key for key-protected package.
          -f, --definition-file=: Path to a definition file that contains features and org preferences
            that the metadata of the package version depends on.
          -x, --installation-key-bypass: Bypass the installation key requirement.
          -w, --wait=: Minutes to wait for the package version to be created.
          -m, --seed-metadata=: Directory containing metadata to be deployed prior to conversion.
          --verbose: Display verbose command output.
          -a, --patch-version=: Specific released patch version to be converted.
          -c, --code-coverage: Calculate and store the code coverage percentage by running the
            packaged Apex tests included in this package version.
          --help: Show help for command
        commands: []
      - description: Create a package.
        name: create
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -n, --name=: Name of the package to create.
          -t, --package-type=: Type of package.
          -d, --description=: Description of the package.
          -e, --no-namespace: Create the package with no namespace; available only for unlocked
            packages.
          -r, --path=: Path to directory that contains the contents of the package.
          --org-dependent: Depends on unpackaged metadata in the installation org; applies to
            unlocked packages only.
          -o, --error-notification-username=: Active Dev Hub user designated to receive email notifications for
            package errors.
          --help: Show help for command
        completion:
          flag:
            package-type:
              - Managed
              - Unlocked
        commands: []
      - description: Delete a package.
        name: delete
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -n, --no-prompt: Don’t prompt before deleting the package.
          -p, --package=: ID (starts with 0Ho) or alias of the package to delete.
          --help: Show help for command
        commands: []
      - description: List all packages in the Dev Hub org.
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          --verbose: Display extended package detail.
          --help: Show help for command
        commands: []
      - description: Update package details.
        name: update
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -v, --target-dev-hub=: Username or alias of the Dev Hub org. Not required if the
            `target-dev-hub` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -p, --package=: ID (starts with 0Ho) or alias of the package to update.
          -n, --name=: New name of the package.
          -d, --description=: New description of the package.
          -o, --error-notification-username=: Active Dev Hub user designated to receive email notifications for
            package errors.
          --enable-app-analytics: Enable AppExchange App Analytics usage data collection on this
            managed package and its components.
          --help: Show help for command
        commands: []
  - description: Commands to develop first-generation managed and unmanaged packages.
    name: package1
    commands:
      - description: Commands to manage first-generation package versions.
        name: version
        commands:
          - description: Create a first-generation package version in the release org.
            name: create
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --package-id=: ID of the metadata package (starts with 033) of which you’re
                creating a new version.
              -n, --name=: Package version name.
              -d, --description=: Package version description.
              -v, --version=: Package version in major.minor format, for example, 3.2.
              -m, --managed-released: Create a managed package version.
              -r, --release-notes-url=: Release notes URL.
              -p, --post-install-url=: Post install URL.
              -k, --installation-key=: "Installation key for key-protected package (default: null)."
              -w, --wait=: "Minutes to wait for the package version to be created (default:
                2 minutes)."
              --help: Show help for command
            commands:
              - description: Retrieve the status of a package version creation request.
                name: get
                flags:
                  --json: Format output as json.
                  --flags-dir=: Import flag values from a directory.
                  -o, --target-org=: Username or alias of the target org. Not required if the
                    `target-org` configuration variable is already set.
                  --api-version=: Override the api version used for api requests made by this
                    command
                  -i, --request-id=: ID of the PackageUploadRequest (starts with 0HD).
                  --help: Show help for command
                commands: []
          - description: Display details about a first-generation package version.
            name: display
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --package-version-id=: ID (starts with 04t) of the metadata package version whose
                details you want to display.
              --help: Show help for command
            commands: []
          - description: List package versions for the specified first-generation package or
              for the org.
            name: list
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -i, --package-id=: Metadata package ID (starts with 033) whose package versions you
                want to list.
              --help: Show help for command
            commands: []
  - description: List installed plugins.
    name: plugins
    flags:
      --json: Format output as json.
      --core: Show core plugins.
      --help: Show help for command
    commands:
      - description: validate a digital signature for a npm package
        name: trust
        commands:
          - description: Validate a digital signature.
            name: verify
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --npm=: Specify the npm name. This can include a tag/version.
              -r, --registry=: The registry name. The behavior is the same as npm.
              --help: Show help for command
            commands: []
      - description: Displays installation properties of a plugin.
        name: inspect
        flags:
          --json: Format output as json.
          -h, --help: Show CLI help.
          -v, --verbose: ""
        commands: []
      - description: Installs a plugin into sf.
        name: install
        flags:
          --json: Format output as json.
          -f, --force: Force npm to fetch remote resources even if a local copy exists on
            disk.
          -h, --help: Show CLI help.
          -s, --silent: Silences npm output.
          -v, --verbose: Show verbose npm output.
        exclusiveflags:
          - - silent
            - verbose
        commands: []
      - description: Installs a plugin into sf.
        name: add
        flags:
          --json: Format output as json.
          -f, --force: Force npm to fetch remote resources even if a local copy exists on
            disk.
          -h, --help: Show CLI help.
          -s, --silent: Silences npm output.
          -v, --verbose: Show verbose npm output.
        exclusiveflags:
          - - silent
            - verbose
        commands: []
      - description: Links a plugin into the CLI for development.
        name: link
        flags:
          -h, --help: Show CLI help.
          --install: Install dependencies after linking the plugin.
          -v, --verbose: ""
        commands: []
      - description: Remove all user-installed and linked plugins.
        name: reset
        flags:
          --hard: Delete node_modules and package manager related files in addition to
            uninstalling plugins.
          --reinstall: Reinstall all plugins after uninstalling.
          --help: Show help for command
        commands: []
      - description: Removes a plugin from the CLI.
        name: uninstall
        flags:
          -h, --help: Show CLI help.
          -v, --verbose: ""
        commands: []
      - description: Removes a plugin from the CLI.
        name: unlink
        flags:
          -h, --help: Show CLI help.
          -v, --verbose: ""
        commands: []
      - description: Removes a plugin from the CLI.
        name: remove
        flags:
          -h, --help: Show CLI help.
          -v, --verbose: ""
        commands: []
      - description: Update installed plugins.
        name: update
        flags:
          -h, --help: Show CLI help.
          -v, --verbose: ""
        commands: []
      - description: See a list of 3rd-party sf plugins you can install.
        name: discover
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          --help: Show help for command
        commands: []
  - description: Work with projects, such as deploy and retrieve metadata.
    name: project
    commands:
      - description: Commands to change the format of your project source files.
        name: convert
        commands:
          - description: Convert metadata retrieved via Metadata API into the source format
              used in Salesforce DX projects.
            name: mdapi
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: Override the api version used for api requests made by this
                command
              -r, --root-dir=: Root directory that contains the Metadata API–formatted metadata.
              -d, --output-dir=: Directory to store your files in after they’re converted to
                source format; can be an absolute or relative path.
              -x, --manifest=: File path to manifest (package.xml) of metadata types to convert.
              -p, --metadata-dir*=: Root of directory or zip file of metadata formatted files to
                convert.
              -m, --metadata*=: Metadata component names to convert.
              --help: Show help for command
            exclusiveflags:
              - - manifest
                - metadata
                - metadata-dir
              - - manifest
                - metadata
            commands: []
          - description: Convert source-formatted files into metadata that you can deploy
              using Metadata API.
            name: source
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: API Version to use in the generated project's manifest. By
                default, will use the version from sfdx-project.json
              -r, --root-dir=: Source directory other than the default package to convert.
              -d, --output-dir=: Output directory to store the Metadata API–formatted files in.
              -n, --package-name=: Name of the package to associate with the metadata-formatted
                files.
              -x, --manifest=: Path to the manifest (package.xml) file that specifies the
                metadata types to convert.
              -p, --source-dir*=: Paths to the local source files to convert.
              -m, --metadata*=: Metadata component names to convert.
              --help: Show help for command
            exclusiveflags:
              - - manifest
                - metadata
                - source-dir
              - - manifest
                - metadata
            commands: []
          - description: Enable a behavior of your project source files, and then update
              your Salesforce DX project to implement the behavior.
            name: source-behavior
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -b, --behavior=: Behavior to enable; the values correspond to the possible values
                of the "sourceBehaviorOption" option in the "sfdx-project.json"
                file.
              --dry-run: Display what the command would do, but don't make any actual
                changes.
              --preserve-temp-dir: Don't delete the metadata API format temporary directory that
                this command creates. Useful for debugging.
              -o, --target-org=: Username or alias of the target org.
              --help: Show help for command
            completion:
              flag:
                behavior:
                  - decomposeCustomLabelsBeta2
                  - decomposeCustomLabelsBeta
                  - decomposePermissionSetBeta
                  - decomposePermissionSetBeta2
                  - decomposeSharingRulesBeta
                  - decomposeWorkflowBeta
                  - decomposeExternalServiceRegistrationBeta
            commands: []
      - description: Commands to delete metadata from a Salesforce org.
        name: delete
        commands:
          - description: Delete source from your project and from a non-source-tracked org.
            name: source
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: Override the api version used for api requests made by this
                command
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -c, --check-only: Validate delete command but don't delete anything from the org
                or the local project.
              -w, --wait=: Number of minutes to wait for the command to finish.
              --tests*=: Apex tests to run when --test-level is RunSpecifiedTests.
              -l, --test-level=: Deployment Apex testing level.
              -r, --no-prompt: Don't prompt for delete confirmation.
              -m, --metadata*=: Metadata components to delete.
              -p, --source-dir*=: Source file paths to delete.
              -t, --track-source: If the delete succeeds, update the source tracking information.
              -f, --force-overwrite: Ignore conflict warnings and overwrite changes to the org.
              --verbose: Verbose output of the delete result.
              --help: Show help for command
            exclusiveflags:
              - - check-only
                - track-source
            completion:
              flag:
                test-level:
                  - NoTestRun
                  - RunSpecifiedTests
                  - RunLocalTests
                  - RunAllTestsInOrg
            commands: []
          - description: Delete all local source tracking information.
            name: tracking
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: Override the api version used for api requests made by this
                command
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -p, --no-prompt: Don't prompt for source tracking override confirmation.
              --help: Show help for command
            commands: []
      - description: Commands to deploy metadata to a Salesforce org.
        name: deploy
        commands:
          - description: Quickly deploy a validated deployment to an org.
            name: pipeline
            commands:
              - description: Quickly deploy a validated deployment to an org.
                name: quick
                flags:
                  --json: Format output as json.
                  --async: Run the command asynchronously.
                  --concise: Show concise output of the command result.
                  --verbose: Show verbose output of the command result.
                  -w, --wait=: Number of minutes to wait for command to complete and
                    display results.
                  -c, --devops-center-username=: Username or alias of the DevOps Center org.
                  -i, --job-id=: Job ID of the validated deployment to quick deploy.
                  -r, --use-most-recent: Use the job ID of the most recently validated deployment.
                  --help: Show help for command
                exclusiveflags:
                  - - concise
                    - verbose
                  - - async
                    - wait
                commands: []
              - description: Check the status of a pipeline deploy operation.
                name: report
                flags:
                  --json: Format output as json.
                  -c, --devops-center-username=: Username or alias of the DevOps Center org.
                  -i, --job-id=: Job ID of the pipeline deployment to check the status of.
                  -r, --use-most-recent: Use the job ID of the most recent deploy operation.
                  --help: Show help for command
                commands: []
              - description: Resume watching a pipeline deploy operation.
                name: resume
                flags:
                  --json: Format output as json.
                  -c, --devops-center-username=: Username or alias of the DevOps Center org.
                  -i, --job-id=: Job ID of the pipeline deploy operation you want to resume.
                  -r, --use-most-recent: Use the job ID of the most recent deploy operation.
                  --concise: Show concise output of the command result.
                  --verbose: Show verbose output of the command result.
                  --help: Show help for command
                exclusiveflags:
                  - - concise
                    - verbose
                commands: []
              - description: Deploy changes from a branch to the pipeline stage’s org.
                name: start
                flags:
                  --json: Format output as json.
                  -b, --branch-name=: Name of the branch in the source control repository that
                    corresponds to the pipeline stage that you want to deploy
                    the changes to.
                  -v, --bundle-version-name=: Version name of the bundle.
                  -a, --deploy-all: Deploy all metadata in the branch to the stage's org.
                  -p, --devops-center-project-name=: Name of the DevOps Center project.
                  -c, --devops-center-username=: Username or alias of the DevOps Center org.
                  -t, --tests*=: Apex tests to run when --test-level is RunSpecifiedTests.
                  -l, --test-level=: Deployment Apex testing level.
                  --async: Run the command asynchronously.
                  -w, --wait=: Number of minutes to wait for command to complete and
                    display results.
                  --verbose: Show verbose output of the command result.
                  --concise: Show concise output of the command result.
                  --help: Show help for command
                exclusiveflags:
                  - - async
                    - wait
                  - - concise
                    - verbose
                completion:
                  flag:
                    test-level:
                      - NoTestRun
                      - RunSpecifiedTests
                      - RunLocalTests
                      - RunAllTestsInOrg
                commands: []
              - description: Perform a validate-only deployment from a branch to the pipeline
                  stage’s org.
                name: validate
                flags:
                  --json: Format output as json.
                  -b, --branch-name=: Name of the branch in the source control repository that
                    corresponds to the pipeline stage that you want to deploy
                    the changes to.
                  -v, --bundle-version-name=: Version name of the bundle.
                  -a, --deploy-all: Deploy all metadata in the branch to the stage's org.
                  -p, --devops-center-project-name=: Name of the DevOps Center project.
                  -c, --devops-center-username=: Username or alias of the DevOps Center org.
                  -t, --tests*=: Apex tests to run when --test-level is RunSpecifiedTests.
                  -l, --test-level=: Deployment Apex testing level.
                  --async: Run the command asynchronously.
                  -w, --wait=: Number of minutes to wait for command to complete and
                    display results.
                  --verbose: Show verbose output of the command result.
                  --concise: Show concise output of the command result.
                  --help: Show help for command
                exclusiveflags:
                  - - async
                    - wait
                  - - concise
                    - verbose
                completion:
                  flag:
                    test-level:
                      - NoTestRun
                      - RunSpecifiedTests
                      - RunLocalTests
                      - RunAllTestsInOrg
                commands: []
          - description: Cancel a deploy operation.
            name: cancel
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org.
              --async: Run the command asynchronously.
              -i, --job-id=: Job ID of the deploy operation you want to cancel.
              -r, --use-most-recent: Use the job ID of the most recent deploy operation.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results.
              --help: Show help for command
            exclusiveflags:
              - - async
                - wait
            commands: []
          - description: Preview a deployment to see what will deploy to the org, the
              potential conflicts, and the ignored files.
            name: preview
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -c, --ignore-conflicts: Don't display conflicts in preview of the deployment.
              -x, --manifest=: Full file path for manifest (package.xml) of components to
                preview.
              -m, --metadata*=: Metadata component names to preview.
              -d, --source-dir*=: Path to the local source files to preview.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --concise: Show only the changes that will be deployed; omits files that
                are forceignored.
              --help: Show help for command
            exclusiveflags:
              - - manifest
                - metadata
                - source-dir
            commands: []
          - description: Quickly deploy a validated deployment to an org.
            name: quick
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --async: Run the command asynchronously.
              --concise: Show concise output of the deploy result.
              -i, --job-id=: Job ID of the deployment you want to quick deploy.
              -o, --target-org=: Username or alias of the target org.
              -r, --use-most-recent: Use the job ID of the most recently validated deployment.
              --verbose: Show verbose output of the deploy result.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results.
              -a, --api-version=: Target API version for the deploy.
              --help: Show help for command
            exclusiveflags:
              - - async
                - wait
              - - concise
                - verbose
            commands: []
          - description: Check or poll for the status of a deploy operation.
            name: report
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org.
              -i, --job-id=: Job ID of the deploy operation you want to check the status of.
              -r, --use-most-recent: Use the job ID of the most recent deploy operation.
              --coverage-formatters*=: Format of the code coverage results.
              --junit: Output JUnit test results.
              --results-dir=: Output directory for code coverage and JUnit results; defaults
                to the deploy ID.
              -w, --wait=: Number of minutes to wait for command to complete and display
                results.
              --help: Show help for command
            completion:
              flag:
                coverage-formatters:
                  - clover
                  - cobertura
                  - html-spa
                  - html
                  - json
                  - json-summary
                  - lcovonly
                  - none
                  - teamcity
                  - text
                  - text-summary
            commands: []
          - description: Resume watching a deploy operation and update source tracking when
              the deploy completes.
            name: resume
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --concise: Show concise output of the deploy operation result.
              -i, --job-id=: Job ID of the deploy operation you want to resume.
              -r, --use-most-recent: Use the job ID of the most recent deploy operation.
              --verbose: Show verbose output of the deploy operation result.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results.
              --coverage-formatters*=: Format of the code coverage results.
              --junit: Output JUnit test results.
              --results-dir=: Output directory for code coverage and JUnit results; defaults
                to the deploy ID.
              --help: Show help for command
            exclusiveflags:
              - - concise
                - verbose
            completion:
              flag:
                coverage-formatters:
                  - clover
                  - cobertura
                  - html-spa
                  - html
                  - json
                  - json-summary
                  - lcovonly
                  - none
                  - teamcity
                  - text
                  - text-summary
            commands: []
          - description: Deploy metadata to an org from your local project.
            name: start
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -a, --api-version=: Target API version for the deploy.
              --async: Run the command asynchronously.
              --concise: Show concise output of the deploy result.
              --dry-run: Validate deploy and run Apex tests but don’t save to the org.
              -c, --ignore-conflicts: Ignore conflicts and deploy local files, even if they overwrite
                changes in the org.
              -r, --ignore-errors: Ignore any errors and don’t roll back deployment.
              -g, --ignore-warnings: Ignore warnings and allow a deployment to complete successfully.
              -x, --manifest=: Full file path for manifest (package.xml) of components to
                deploy.
              -m, --metadata*=: Metadata component names to deploy. Wildcards (`*` ) supported
                as long as you use quotes, such as `ApexClass:MyClass*`.
              --metadata-dir=: Root of directory or zip file of metadata formatted files to
                deploy.
              --single-package: Indicates that the metadata zip file points to a directory
                structure for a single package.
              -d, --source-dir*=: Path to the local source files to deploy.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -t, --tests*=: Apex tests to run when --test-level is RunSpecifiedTests.
              -l, --test-level=: Deployment Apex testing level.
              --verbose: Show verbose output of the deploy result.
              -w, --wait=: Number of minutes to wait for command to complete and display
                results.
              --purge-on-delete: Specify that deleted components in the destructive changes
                manifest file are immediately eligible for deletion rather than
                being stored in the Recycle Bin.
              --pre-destructive-changes=: File path for a manifest (destructiveChangesPre.xml) of
                components to delete before the deploy.
              --post-destructive-changes=: File path for a manifest (destructiveChangesPost.xml) of
                components to delete after the deploy.
              --coverage-formatters*=: Format of the code coverage results.
              --junit: Output JUnit test results.
              --results-dir=: Output directory for code coverage and JUnit results; defaults
                to the deploy ID.
              --help: Show help for command
            exclusiveflags:
              - - async
                - wait
              - - concise
                - verbose
              - - manifest
                - metadata
                - metadata-dir
                - source-dir
            completion:
              flag:
                test-level:
                  - NoTestRun
                  - RunSpecifiedTests
                  - RunLocalTests
                  - RunAllTestsInOrg
                coverage-formatters:
                  - clover
                  - cobertura
                  - html-spa
                  - html
                  - json
                  - json-summary
                  - lcovonly
                  - none
                  - teamcity
                  - text
                  - text-summary
            commands: []
          - description: Validate a metadata deployment without actually executing it.
            name: validate
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -a, --api-version=: Target API version for the validation.
              --async: Run the command asynchronously.
              --concise: Show concise output of the validation result.
              -x, --manifest=: Full file path for manifest (package.xml) of components to
                validate for deployment.
              -m, --metadata*=: Metadata component names to validate for deployment.
              -d, --source-dir*=: Path to the local source files to validate for deployment.
              --metadata-dir=: Root of directory or zip file of metadata formatted files to
                deploy.
              --single-package: Indicates that the metadata zip file points to a directory
                structure for a single package.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -t, --tests*=: Apex tests to run when --test-level is RunSpecifiedTests.
              -l, --test-level=: Deployment Apex testing level.
              --verbose: Show verbose output of the validation result.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results.
              -g, --ignore-warnings: Ignore warnings and allow a deployment to complete successfully.
              --coverage-formatters*=: Format of the code coverage results.
              --junit: Output JUnit test results.
              --results-dir=: Output directory for code coverage and JUnit results; defaults
                to the deploy ID.
              --purge-on-delete: Specify that deleted components in the destructive changes
                manifest file are immediately eligible for deletion rather than
                being stored in the Recycle Bin.
              --pre-destructive-changes=: File path for a manifest (destructiveChangesPre.xml) of
                components to delete before the deploy
              --post-destructive-changes=: File path for a manifest (destructiveChangesPost.xml) of
                components to delete after the deploy.
              --help: Show help for command
            exclusiveflags:
              - - concise
                - verbose
            completion:
              flag:
                test-level:
                  - RunAllTestsInOrg
                  - RunLocalTests
                  - RunSpecifiedTests
                coverage-formatters:
                  - clover
                  - cobertura
                  - html-spa
                  - html
                  - json
                  - json-summary
                  - lcovonly
                  - none
                  - teamcity
                  - text
                  - text-summary
            commands: []
      - description: Generate a Salesforce DX project.
        name: generate
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -n, --name=: Name of the generated project.
          -t, --template=: Template to use for project creation.
          -d, --output-dir=: Directory for saving the created files.
          -s, --namespace=: Namespace associated with this project and any connected scratch
            orgs.
          -p, --default-package-dir=: Default package directory name.
          -x, --manifest: Generate a manifest (package.xml) for change-set based development.
          --api-version=: Will set this version as sourceApiVersion in the sfdx-project.json
            file
          --help: Show help for command
        completion:
          flag:
            template:
              - standard
              - empty
              - analytics
        commands:
          - description: Create a project manifest that lists the metadata components you
              want to deploy or retrieve.
            name: manifest
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              --api-version=: Override the api version used for api requests made by this
                command
              -m, --metadata*=: Names of metadata components to include in the manifest.
              -p, --source-dir*=: Paths to the local source files to include in the manifest.
              -n, --name=: Name of a custom manifest file to create.
              -t, --type=: Type of manifest to create; the type determines the name of the
                created file.
              -c, --include-packages*=: Package types (managed, unlocked) whose metadata is included in
                the manifest; by default, metadata in managed and unlocked
                packages is excluded. Metadata in unmanaged packages is always
                included.
              --excluded-metadata*=: Metadata types to exclude when building a manifest from an org.
                Specify the name of the type, not the name of a specific
                component.
              --from-org=: Username or alias of the org that contains the metadata
                components from which to build a manifest.
              -d, --output-dir=: Directory to save the created manifest.
              --help: Show help for command
            exclusiveflags:
              - - name
                - type
              - - from-org
                - source-dir
            completion:
              flag:
                type:
                  - pre
                  - post
                  - destroy
                  - package
                include-packages:
                  - managed
                  - unlocked
            commands: []
      - description: Commands to list metadata in a Salesforce project.
        name: list
        commands:
          - description: Check your local project package directories for forceignored
              files.
            name: ignored
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -p, --source-dir=: File or directory of files that the command checks for
                foreceignored files.
              --help: Show help for command
            commands: []
      - description: Commands to reset the source tracking state.
        name: reset
        commands:
          - description: Reset local and remote source tracking.
            name: tracking
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --api-version=: Override the api version used for api requests made by this
                command
              -r, --revision=: SourceMember revision counter number to reset to.
              -p, --no-prompt: Don't prompt for source tracking override confirmation.
              --help: Show help for command
            commands: []
      - description: Commands to retrieve metadata from a Salesforce org
        name: retrieve
        commands:
          - description: Preview a retrieval to see what will be retrieved from the org, the
              potential conflicts, and the ignored files.
            name: preview
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -c, --ignore-conflicts: Don't display conflicts in the preview of the retrieval.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              --concise: Show only the changes that will be retrieved; omits files that
                are forceignored.
              --help: Show help for command
            commands: []
          - description: Retrieve metadata from an org to your local project.
            name: start
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -a, --api-version=: Target API version for the retrieve.
              -c, --ignore-conflicts: Ignore conflicts and retrieve and save files to your local
                filesystem, even if they overwrite your local changes.
              -x, --manifest=: File path for the manifest (package.xml) that specifies the
                components to retrieve.
              -m, --metadata*=: Metadata component names to retrieve. Wildcards (`*`) supported
                as long as you use quotes, such as `ApexClass:MyClass*`.
              -n, --package-name*=: Package names to retrieve. Use of this flag is for reference
                only; don't use it to retrieve packaged metadata for
                development.
              -r, --output-dir=: Directory root for the retrieved source files.
              --single-package: Indicates that the zip file points to a directory structure for
                a single package.
              -d, --source-dir*=: File paths for source to retrieve from the org.
              -t, --target-metadata-dir=: Directory that will contain the retrieved metadata format files
                or ZIP.
              -o, --target-org=: Username or alias of the target org. Not required if the
                `target-org` configuration variable is already set.
              -w, --wait=: Number of minutes to wait for the command to complete and
                display results to the terminal window.
              -z, --unzip: Extract all files from the retrieved zip file.
              --zip-file-name=: File name to use for the retrieved zip file.
              --help: Show help for command
            exclusiveflags:
              - - manifest
                - metadata
                - source-dir
              - - output-dir
                - package-name
                - source-dir
              - - ignore-conflicts
                - single-package
              - - ignore-conflicts
                - target-metadata-dir
              - - ignore-conflicts
                - unzip
              - - ignore-conflicts
                - zip-file-name
            commands: []
  - description: Scan code to detect code quality issues and security vulnerabilities.
    name: scanner
    commands:
      - description: View or add rules to scan code.
        name: rule
        commands:
          - description: Add custom rules to Salesforce Code Analyzer's registry to run them
              along with the built-in rules.
            name: add
            flags:
              --json: Format output as json.
              -l, --language=: Language that the custom rules are evaluated against.
              -p, --path*=: One or more paths (such as a directory or JAR file) to custom
                rule definitions.
              --help: Show help for command
            commands: []
          - description: Provide detailed information about a rule that includes the rule's
              language (such as Apex or Java), the violation it detects, example
              code of the violation, and the rule's categories and rulesets.
            name: describe
            flags:
              --json: Format output as json.
              -n, --rulename=: The name of the rule.
              --verbose: Emit additional command output to stdout.
              --help: Show help for command
            commands: []
          - description: List basic information about all rules matching provided criteria.
            name: list
            flags:
              --json: Format output as json.
              --verbose: Emit additional command output to stdout.
              -c, --category*=: Select rules by category.
              -l, --language*=: Select rules by language.
              -e, --engine*=: Select rules by engine.
              --help: Show help for command
            completion:
              flag:
                engine:
                  - eslint
                  - eslint-lwc
                  - eslint-typescript
                  - pmd
                  - pmd-appexchange
                  - retire-js
                  - cpd
                  - sfge
            commands: []
          - description: Remove custom rules from the registry of available rules.
            name: remove
            flags:
              --json: Format output as json.
              --verbose: Emit additional command output to stdout.
              -f, --force: Bypass the confirmation prompt and immediately remove the rules.
              -p, --path*=: One or more paths to remove.
              --help: Show help for command
            commands: []
      - description: Scan a codebase with all the rules in the registry, or use
          parameters to filter the rules based on rulename, category, or
          ruleset.
        name: run
        flags:
          --json: Format output as json.
          --verbose: Emit additional command output to stdout.
          -c, --category*=: One or more categories of rules to run.
          -f, --format=: The output format for results written directly to the console.
          -o, --outfile=: File to write output to.
          -s, --severity-threshold=: An error will be thrown when a violation is found with a severity
            equal to or greater than the specified level.
          --normalize-severity: Include normalized severity levels 1 (high), 2 (moderate), and 3
            (low) with the results.
          -p, --projectdir*=: The relative or absolute root project directories used to set the
            context for Graph Engine's analysis.
          -e, --engine*=: Specify which engines to run.
          -t, --target*=: Source code location.
          --tsconfig=: Location of tsconfig.json file used by the eslint-typescript engine.
            The --tsconfig flag can’t be used with --eslintconfig flag.
          --eslintconfig=: Specify the location of eslintrc config to customize eslint engine.
            The --tsconfig flag can’t be used with --eslintconfig flag.
          --pmdconfig=: Location of PMD rule reference XML file to customize rule selection.
          --verbose-violations: Includes Retire-js violation-message details about each
            vulnerability in the results, including summary, common
            vulnerabilities and exposures (CVE), and URLs.
          --help: Show help for command
        completion:
          flag:
            format:
              - csv
              - html
              - json
              - junit
              - sarif
              - table
              - xml
            engine:
              - eslint
              - eslint-lwc
              - eslint-typescript
              - pmd
              - pmd-appexchange
              - retire-js
              - sfge
              - cpd
        exclusiveflags:
          - - json
            - severity-threshold
        commands:
          - description: Scan codebase with all DFA rules by default.
            name: dfa
            flags:
              --json: Format output as json.
              --verbose: Emit additional command output to stdout.
              -c, --category*=: One or more categories of rules to run.
              -f, --format=: The output format for results written directly to the console.
              -o, --outfile=: File to write output to.
              -s, --severity-threshold=: An error will be thrown when a violation is found with a
                severity equal to or greater than the specified level.
              --normalize-severity: Include normalized severity levels 1 (high), 2 (moderate), and 3
                (low) with the results.
              -p, --projectdir*=: The relative or absolute root project directories used to set
                the context for Graph Engine's analysis.
              --with-pilot: Allow pilot rules to execute.
              -t, --target*=: Source code location.
              --rule-thread-count=: Number of DFA rule-evaluation threads or how many entry points
                can be evaluated concurrently. Inherits its value from the
                SFGE_RULE_THREAD_COUNT environment variable, if set.
              --rule-thread-timeout=: Time limit, in milliseconds, for evaluating a single entry
                point. Inherits its value from the "SFGE_RULE_THREAD_TIMEOUT"
                environment variable, if set.
              --rule-disable-warning-violation: Disable warning violations from Salesforce Graph Engine.
                Inherits value from SFGE_RULE_DISABLE_WARNING_VIOLATION env-var,
                if set.
              --sfgejvmargs=: Java Virtual Machine (JVM) arguments to override system defaults
                while executing Salesforce Graph Engine.
              --pathexplimit=: Path expansion  upper boundary to limit the complexity of code
                that Graph Engine analyzes before failing test. Inherits it
                value from the "SFGE_PATH_EXPANSION_LIMIT", if set.
              --help: Show help for command
            exclusiveflags:
              - - json
                - severity-threshold
            completion:
              flag:
                format:
                  - csv
                  - html
                  - json
                  - junit
                  - sarif
                  - table
                  - xml
            commands: []
  - description: Generate metadata files.
    name: schema
    commands:
      - description: Generate metadata files for various Salesforce database schema.
        name: generate
        commands:
          - description: Generate metadata source files for a new custom field on a
              specified object.
            name: field
            flags:
              --flags-dir=: Import flag values from a directory.
              -l, --label=: The field's label.
              -o, --object=: The directory that contains the object's source files.
              --help: Show help for command
            commands: []
          - description: Generate metadata source files for a new platform event.
            name: platformevent
            flags:
              --flags-dir=: Import flag values from a directory.
              -l, --label=: The platform event's label.
              --help: Show help for command
            commands: []
          - description: Generate metadata source files for a new custom object.
            name: sobject
            flags:
              --flags-dir=: Import flag values from a directory.
              -l, --label=: The custom object's label.
              -f, --use-default-features: Enable all optional features without prompting.
              --help: Show help for command
            commands: []
          - description: Generate the metadata source files for a new custom tab on a custom
              object.
            name: tab
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -o, --object=: API name of the custom object you're generating a tab for.
              -d, --directory=: Path to a "tabs" directory that will contain the source files
                for your new tab.
              -i, --icon=: Number from 1 to 100 that specifies the color scheme and icon
                for the custom tab.
              --help: Show help for command
            commands: []
  - description: Generate incremental package manifest and source content
    name: sgd
    commands:
      - description: Generate incremental package manifest and source content
        name: source
        commands:
          - description: Generate incremental package manifest and source content
            name: delta
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -f, --from=: commit sha from where the diff is done
              -t, --to=: commit sha to where the diff is done
              -d, --generate-delta: generate delta files in [--output-dir] folder
              -o, --output-dir=: source package specific output
              -r, --repo-dir=: git repository location
              -s, --source-dir*=: source folders focus location relative to --repo-dir
              -i, --ignore-file=: file listing paths to explicitly ignore for any diff actions
              -D, --ignore-destructive-file=: file listing paths to explicitly ignore for any destructive
                actions
              -n, --include-file=: file listing paths to explicitly include for any diff actions
              -N, --include-destructive-file=: file listing paths to explicitly include for any destructive
                actions
              -W, --ignore-whitespace: ignore git diff whitespace (space, tab, eol) changes
              -a, --api-version=: salesforce metadata API version, default to sfdx-project.json
                "sourceApiVersion" attribute or latest version
              --help: Show help for command
            commands: []
  - description: Commands to interact with Salesforce objects.
    name: sobject
    commands:
      - description: Display the metadata for a standard or custom object or a Tooling
          API object.
        name: describe
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -s, --sobject=: API name of the object to describe.
          -t, --use-tooling-api: Use Tooling API to display metadata for Tooling API objects.
          --help: Show help for command
        commands: []
      - description: List all Salesforce objects of a specified category.
        name: list
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -o, --target-org=: Username or alias of the target org. Not required if the
            `target-org` configuration variable is already set.
          --api-version=: Override the api version used for api requests made by this command
          -s, --sobject=: Category of objects to list.
          --help: Show help for command
        commands: []
  - description: Work with static resources.
    name: static-resource
    commands:
      - description: Generate a static resource.
        name: generate
        flags:
          --json: Format output as json.
          --flags-dir=: Import flag values from a directory.
          -n, --name=: Name of the generated static resource.
          --type=: Content type (mime type) of the generated static resource.
          -d, --output-dir=: Directory for saving the created files.
          --api-version=: Override the api version used for api requests made by this command
          --help: Show help for command
        commands: []
  - description: update the sf CLI
    name: update
    flags:
      -a, --available: See available versions.
      --force: Force a re-download of the requested version.
      -i, --interactive: Interactively select version to install. This is ignored if a channel is
        provided.
      -b, --verbose: Show more details about the available versions.
      -v, --version=: Install a specific version.
      --help: Show help for command
    exclusiveflags:
      - - available
        - interactive
        - version
      - - available
        - force
        - interactive
      - - interactive
        - version
    commands: []
  - description: ""
    name: version
    flags:
      --json: Format output as json.
      --verbose: Show additional information about the CLI.
      --help: Show help for command
    commands: []
  - description: Work with Visualforce components.
    name: visualforce
    commands:
      - description: Create a Visualforce page or component.
        name: generate
        commands:
          - description: Generate a Visualforce Component.
            name: component
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Visualforce Component.
              -t, --template=: Template to use for file creation.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              -l, --label=: Visualforce Component label.
              --help: Show help for command
            completion:
              flag:
                template:
                  - DefaultVFComponent
            commands: []
          - description: Generate a Visualforce Page.
            name: page
            flags:
              --json: Format output as json.
              --flags-dir=: Import flag values from a directory.
              -n, --name=: Name of the generated Visualforce Page.
              -d, --output-dir=: Directory for saving the created files.
              --api-version=: Override the api version used for api requests made by this
                command
              -l, --label=: Visualforce Page label.
              --help: Show help for command
            commands: []
  - description: Generate a carapace spec file
    name: carapace-gen
    flags:
      -r, --refresh-cache: Refresh cache (ignores displaying instructions)
      --help: Show help for command
    commands: []
  - description: Display autocomplete installation instructions.
    name: autocomplete
    flags:
      -r, --refresh-cache: Refresh cache (ignores displaying instructions)
      --help: Show help for command
    commands: []
  - description: List all sf commands.
    name: commands
    flags:
      --json: Format output as json.
      -c, --columns*=: Only show provided columns (comma-separated).
      --deprecated: Show deprecated commands.
      -x, --extended: Show extra columns.
      --hidden: Show hidden commands.
      --no-truncate: Do not truncate output.
      --sort=: Property to sort by.
      --tree: Show tree of commands.
      --help: Show help for command
    exclusiveflags:
      - - columns
        - tree
      - - extended
        - tree
      - - no-truncate
        - tree
      - - sort
        - tree
    completion:
      flag:
        columns:
          - id
          - plugin
          - summary
          - type
        sort:
          - id
          - plugin
          - summary
          - type
    commands: []
  - description: Display help for sf.
    name: help
    flags:
      -n, --nested-commands: Include all nested commands in the output.
      --help: Show help for command
    commands: []
  - description: Search for a command.
    name: search
    flags:
      --help: Show help for command
    commands: []
  - description: Show which plugin a command is in.
    name: which
    flags:
      --json: Format output as json.
      --help: Show help for command
    commands: []
  - description: Gather CLI configuration data and run diagnostic tests to discover
      and report potential problems in your environment.
    name: doctor
    flags:
      --json: Format output as json.
      --flags-dir=: Import flag values from a directory.
      -c, --command=: Command to run in debug mode; results are written to a log file.
      -p, --plugin=: Specific plugin on which to run diagnostics.
      -d, --output-dir=: Directory to save all created files rather than the current working
        directory.
      -i, --create-issue: Create a new issue on our GitHub repo and attach all diagnostic results.
      --help: Show help for command
    commands: []
  - description: Display Salesforce CLI release notes on the command line.
    name: whatsnew
    flags:
      --json: Format output as json.
      --flags-dir=: Import flag values from a directory.
      -v, --version=: CLI version or tag for which to display release notes.
      --help: Show help for command
    commands: []
