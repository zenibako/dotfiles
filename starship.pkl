import "package://pkg.pkl-lang.org/pkl-pantry/pkl.toml@1.0.0#/toml.pkl"

// Get editor completions based on the config schema
`$schema` = "https://starship.rs/config-schema.json"

// Inserts a blank line between shell prompts
add_newline = true

// Show jj after git but before rest of prompts
format = #"""
  $username\
  $hostname\
  $localip\
  $shlvl\
  $singularity\
  $kubernetes\
  $directory\
  $vcsh\
  $fossil_branch\
  $fossil_metrics\
  $git_branch\
  $git_commit\
  $git_state\
  $git_metrics\
  $git_status\
  ${custom.jj_change}\
  ${custom.jj_desc}\
  $all
"""#

command_timeout = 750

// Replace the '❯' symbol in the prompt with '➜'
// [character] # The name of the module we are configuring is 'character'
// success_symbol = '[➜](bold green)' # The 'success_symbol' segment is being set to '➜' with the color 'bold green'

// Disable the package module, hiding it from the prompt completely
package {
  isabled = true
}

// Hide the git commit prompt
git_commit {
  disabled = true
}

custom {
  sf {
    description     = "The target org used by default for Salesforce CLI commands"
    command         = "sf config get target-org --json | from json | get result.value.0 "
    `when`          = "sf config get target-org --json | from json | get result.value "
    format          = "via [$symbol ($output)]($style) "
    style           = "bold 039"
    symbol          = "󰢎"
    ignore_timeout  = true
  }
  jj_change {
    description     = "The working copy of the repo in your current directory: workspaces (if relevant), change ID, bookmarks"
    command         = #"jj log --no-graph -r=@ -T='separate(" ", working_copies, change_id.shortest(), bookmarks,)'"#
    `when`          = #"zsh -c 'test -n "$(jj status)" || exit 1'"#
    format          = "on [$symbol ($output)]($style) "
    symbol          = "🐦"
    style           = "bold purple"
    ignore_timeout  = true
  }
  jj_desc {
    description     = "The description of your working copy, if set"
    // command         = #"jj log --no-graph -r=@ -T="description.first_line()" | awk '{if(length($0) > 25) {s = substr($0, 1, 25); sub(/[ \t\r\n]+$/, "", s); print s "…"} else {print $0}}'"#
    command         = #"jj log --no-graph -r=@ -T="description.first_line()""#
    `when`          = #"zsh -c 'test -n "$(jj status)" -a -n "$(jj log --no-graph -r=@ -T='description')" || exit 1'"#
    format          = "$symbol [($output)]($style) "
    symbol          = "|"
    ignore_timeout  = true
  }
}

